<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>REST &amp; API</title>
    <link href="/blog.github.io/2020/10/05/REST%20&amp;%20API/"/>
    <url>/blog.github.io/2020/10/05/REST%20&amp;%20API/</url>
    
    <content type="html"><![CDATA[<h1 id="REST笔记"><a href="#REST笔记" class="headerlink" title="REST笔记"></a>REST笔记</h1><p>代码实践在文件中Wiki-API文件夹中.</p><h4 id="HTTP-Request-verbs"><a href="#HTTP-Request-verbs" class="headerlink" title="HTTP Request verbs"></a>HTTP Request verbs</h4><ul><li>GET</li><li>POST</li><li>PUT &amp; PATCH</li><li>DELETE</li></ul><p>对应于数据库中的READ CREATE UPDATE DELETE</p><p>PUT和PATCH都是是更新, PUT是请求一整个新的数据, PATCH是只请求部分数据(换单车和换轮胎的区别)</p><h1 id="创建一个REST-route-wiki风格"><a href="#创建一个REST-route-wiki风格" class="headerlink" title="创建一个REST route (wiki风格)"></a>创建一个REST route (wiki风格)</h1><h4 id="设计-本案例中对于不同路径的操作和结果"><a href="#设计-本案例中对于不同路径的操作和结果" class="headerlink" title="设计: 本案例中对于不同路径的操作和结果"></a>设计: 本案例中对于不同路径的操作和结果</h4><table><thead><tr><th align="left">HTTP verbs</th><th align="left">/articles</th><th align="left">/articles/jack</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">Fertches all the article</td><td align="left">Fetches the article on jack</td></tr><tr><td align="left">POST</td><td align="left">Create one new article</td><td align="left">-</td></tr><tr><td align="left">PUT</td><td align="left">-</td><td align="left">Updates the article on jack</td></tr><tr><td align="left">PATCH</td><td align="left">-</td><td align="left">Updates the article on jack</td></tr><tr><td align="left">DELETE</td><td align="left">Deletes all the articles</td><td align="left">Deletes the article on jack</td></tr></tbody></table><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>下载一个可视化的MongoDB管理软件 ROBO 3T</p><p>shell中 代开mongoDB <code>mongod</code></p><p>ROBO 3T中create一个新的连接</p><p>localhost 默认端口27017</p><p>创建一个新的database wikiDB</p><p>创建一个新的collections articles</p><p>articles上点击 insert document 键入数据</p><pre><code class="hljs JSON">&#123;    title: &quot;REST&quot;    content: &quot;REST is today class.&quot;&#125;</code></pre><p>以及粘贴:</p><pre><code class="hljs JSON">&#123;    <span class="hljs-attr">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;5c139771d79ac8eac11e754a&quot;</span>),    <span class="hljs-attr">&quot;title&quot;</span> : <span class="hljs-string">&quot;API&quot;</span>,    <span class="hljs-attr">&quot;content&quot;</span> : <span class="hljs-string">&quot;API stands for Application Programming Interface. It is a set of subroutine definitions, communication protocols, and tools for building software. In general terms, it is a set of clearly defined methods of communication among various components. A good API makes it easier to develop a computer program by providing all the building blocks, which are then put together by the programmer.&quot;</span>&#125;&#123;    <span class="hljs-attr">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;5c1398aad79ac8eac11e7561&quot;</span>),    <span class="hljs-attr">&quot;title&quot;</span> : <span class="hljs-string">&quot;Bootstrap&quot;</span>,    <span class="hljs-attr">&quot;content&quot;</span> : <span class="hljs-string">&quot;This is a framework developed by Twitter that contains pre-made front-end templates for web design&quot;</span>&#125;&#123;    <span class="hljs-attr">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;5c1398ecd79ac8eac11e7567&quot;</span>),    <span class="hljs-attr">&quot;title&quot;</span> : <span class="hljs-string">&quot;DOM&quot;</span>,    <span class="hljs-attr">&quot;content&quot;</span> : <span class="hljs-string">&quot;The Document Object Model is like an API for interacting with our HTML&quot;</span>&#125;</code></pre><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>进入新建立的项目目录下:</p><p><code>npm init -y</code></p><p><code>npm i body-parser mongoose ejs express</code></p><p><code>touch app.js</code></p><h3 id="编辑主文件app-js"><a href="#编辑主文件app-js" class="headerlink" title="编辑主文件app.js"></a>编辑主文件app.js</h3><p>粘贴代码:</p><pre><code class="hljs JavaScript"><span class="hljs-comment">//jshint esversion:6</span><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);<span class="hljs-keyword">const</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ejs&quot;</span>);<span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<span class="hljs-keyword">const</span> app = express();app.set(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);app.use(bodyParser.urlencoded(&#123;  extended: <span class="hljs-literal">true</span>&#125;));app.use(express.static(<span class="hljs-string">&quot;public&quot;</span>));<span class="hljs-comment">//TODO</span>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server started on port 3000&quot;</span>);&#125;);</code></pre><p>添加语句,连接数据库:</p><pre><code class="hljs javascript">mongoose.connect(<span class="hljs-string">&quot;mongodb://localhost:27017/wikiDB&quot;</span>,&#123; <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span> &#125;);</code></pre><p>建立article的schema, 新建一个aricles表格(已经建立):</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> articleSchema = &#123;  title: <span class="hljs-built_in">String</span>,  content: <span class="hljs-built_in">String</span>&#125;;<span class="hljs-keyword">const</span> Aricle = mongoose.model(<span class="hljs-string">&quot;Article&quot;</span>, articleSchema);</code></pre><p>最终代码为:</p><pre><code class="hljs JavaScript"><span class="hljs-comment">//jshint esversion:6</span><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);<span class="hljs-keyword">const</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ejs&quot;</span>);<span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<span class="hljs-keyword">const</span> app = express();app.set(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);app.use(bodyParser.urlencoded(&#123;  extended: <span class="hljs-literal">true</span>&#125;));app.use(express.static(<span class="hljs-string">&quot;public&quot;</span>));mongoose.connect(<span class="hljs-string">&quot;mongodb://localhost:27017/wikiDB&quot;</span>,&#123; <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span> &#125;);<span class="hljs-keyword">const</span> articleSchema = &#123;  title: <span class="hljs-built_in">String</span>,  content: <span class="hljs-built_in">String</span>&#125;;<span class="hljs-keyword">const</span> Aricle = mongoose.model(<span class="hljs-string">&quot;Article&quot;</span>, articleSchema);app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server started on port 3000&quot;</span>);&#125;);</code></pre><h3 id="根据设计-逐个实现"><a href="#根据设计-逐个实现" class="headerlink" title="根据设计,逐个实现"></a>根据设计,逐个实现</h3><h5 id="GET-article"><a href="#GET-article" class="headerlink" title="GET /article:"></a>GET /article:</h5><pre><code class="hljs JavaScript">app.get(<span class="hljs-string">&quot;/articles&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  Article.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, foundArticles</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.send(foundArticles);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;);</code></pre><h5 id="POST-article"><a href="#POST-article" class="headerlink" title="POST /article:"></a>POST /article:</h5><p>使用工具 Postman用于测试POST方法</p><p>软件内, 左侧选择collections, 右侧改为POST, 输入/localhost:3000/articles</p><p>下方选择body, 选择x-www-form-unlencoded</p><p>输入title和content 以及他们的内容</p><pre><code class="hljs JavaScript">app.post(<span class="hljs-string">&quot;/articles&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> newArticle = <span class="hljs-keyword">new</span> Article(&#123;    title: req.body.title,    content: req.body.content  &#125;);  newArticle.save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.send(<span class="hljs-string">&quot;Successfully add a new article.&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;);</code></pre><h5 id="DELETE-article"><a href="#DELETE-article" class="headerlink" title="DELETE /article:"></a>DELETE /article:</h5><pre><code class="hljs JavaScript">app.delete(<span class="hljs-string">&quot;/articles&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  Article.deleteMany(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.send(<span class="hljs-string">&quot;Successfully delete all articles.&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;);</code></pre><h4 id="简洁方法-Chained-Route-Using-Express"><a href="#简洁方法-Chained-Route-Using-Express" class="headerlink" title="简洁方法: Chained Route Using Express"></a>简洁方法: Chained Route Using Express</h4><p>Express有一种简单方法重新排列相同路径下的get post delete:</p><pre><code class="hljs JavaScript">app.route(<span class="hljs-string">&#x27;/book&#x27;</span>)  .get(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123; ...  &#125;)  .post(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123; ...  &#125;)  .put(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123; ...  &#125;)</code></pre><p>所以, 上面三段可以合并为:</p><pre><code class="hljs JavaScript">app.route(<span class="hljs-string">&#x27;/book&#x27;</span>).get(...).post(...).delete(...);</code></pre><p>即:</p><pre><code class="hljs JavaScript">app.route(<span class="hljs-string">&#x27;/articles&#x27;</span>).get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  Article.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, foundArticles</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.send(foundArticles);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;).post(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> newArticle = <span class="hljs-keyword">new</span> Article(&#123;    title: req.body.title,    content: req.body.content  &#125;);  newArticle.save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.send(<span class="hljs-string">&quot;Successfully add a new article.&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;).delete(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  Article.deleteMany(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.send(<span class="hljs-string">&quot;Successfully delete all articles.&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;);</code></pre><h5 id="对于某个特定article的操作"><a href="#对于某个特定article的操作" class="headerlink" title="对于某个特定article的操作:"></a>对于某个特定article的操作:</h5><h5 id="GET-article-某篇article"><a href="#GET-article-某篇article" class="headerlink" title="GET /article/某篇article:"></a>GET /article/某篇article:</h5><p>使用chained route</p><pre><code class="hljs JavaScript">app.route(<span class="hljs-string">&quot;/articles/:articleTitle&quot;</span>).get().put().patch().delete();</code></pre><pre><code class="hljs JavaScript">.get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  Article.findOne(&#123;<span class="hljs-attr">title</span>: req.params.articleTitle&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,foundArticle</span>)</span>&#123;    <span class="hljs-keyword">if</span>(foundArticle)&#123;      res.send(foundArticle);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(<span class="hljs-string">&quot;No article matching this title was found.&quot;</span>)    &#125;  &#125;);&#125;)</code></pre><p>如果是路径中有空格,则用%20代替. 如/articles/Jack%20James</p><h5 id="PUT-article-某篇article"><a href="#PUT-article-某篇article" class="headerlink" title="PUT /article/某篇article:"></a>PUT /article/某篇article:</h5><pre><code class="hljs JavaScript">.put(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  Article.update(    &#123;<span class="hljs-attr">title</span>: req.params.articleTitle&#125;,    &#123;<span class="hljs-attr">title</span>: req.body.title, <span class="hljs-attr">content</span>: req.body.content&#125;, <span class="hljs-comment">//可以同时更改title和content.但改title之后路径就不对了</span>    &#123;<span class="hljs-attr">overwrite</span>: <span class="hljs-literal">true</span>&#125;,    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;      <span class="hljs-keyword">if</span>(!err)&#123;        res.send(<span class="hljs-string">&quot;Successfully update article.&quot;</span>);      &#125;<span class="hljs-keyword">else</span>&#123;        res.send(err);      &#125;    &#125;  );&#125;)</code></pre><p>如果req时只提供title信息,而无content信息,查看数据库可见将没有content信息. 这是因为PUT方法是整体更新</p><h5 id="PATCH-article-某篇article"><a href="#PATCH-article-某篇article" class="headerlink" title="PATCH /article/某篇article:"></a>PATCH /article/某篇article:</h5><pre><code class="hljs JavaScript">.patch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  Article.update(    &#123;<span class="hljs-attr">title</span>: req.params.articleTitle&#125;,    &#123;<span class="hljs-attr">$set</span>: req.body&#125;,  <span class="hljs-comment">//将body设置为req里的内容,这样无论是哪个信息被改变,都能被传递()</span>    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;      <span class="hljs-keyword">if</span>(!err)&#123;        res.send(<span class="hljs-string">&quot;Successfully update article.&quot;</span>);      &#125;<span class="hljs-keyword">else</span>&#123;        res.send(err);      &#125;    &#125;  );&#125;)</code></pre><h5 id="DELETE-article-某篇article"><a href="#DELETE-article-某篇article" class="headerlink" title="DELETE /article/某篇article:"></a>DELETE /article/某篇article:</h5><pre><code class="hljs JavaScript">.delete(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  Article.deleteOne(    &#123;<span class="hljs-attr">title</span>: req.params.articleTitle&#125;,    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;      <span class="hljs-keyword">if</span>(!err)&#123;        res.send(<span class="hljs-string">&quot;Successfully delete the matching article.&quot;</span>);      &#125;<span class="hljs-keyword">else</span>&#123;        res.send(err);      &#125;    &#125;  );&#125;);   <span class="hljs-comment">//不要忘了最后的分号,</span><span class="hljs-comment">//为app.route(&quot;/articles/:articleTitle&quot;).get().put().patch().delete();结尾</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
      <tag>REST</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>REACT project: Keeper</title>
    <link href="/blog.github.io/2020/10/05/REACT-project-Keeper/"/>
    <url>/blog.github.io/2020/10/05/REACT-project-Keeper/</url>
    
    <content type="html"><![CDATA[<h1 id="React实践项目keeper"><a href="#React实践项目keeper" class="headerlink" title="React实践项目keeper"></a>React实践项目keeper</h1><p>做一个便签管理的项目<br>最终效果<a href="https://w00gz.csb.app/">这个</a></p><p>从<a href="https://codesandbox.io/s/keeper-app-part-1-completed-oplw1?fontsize=14">这里</a>导出这个项目作为基础.</p><p><code>npm install</code></p><p>接下来要做的事情:</p><ul><li><ol><li>Create a new React app.</li></ol></li><li><ol start="2"><li>Create a App.jsx component.</li></ol></li><li><ol start="3"><li>Create a Header.jsx component that renders a <header> element to show the Keeper App name in an <code>&lt;h1&gt;</code>.</li></ol></li><li><ol start="4"><li>Create a Footer.jsx component that renders a <footer> element to show a copyright message in a<code>&lt;p&gt;</code>with a dynamically updated year.</li></ol></li><li><ol start="5"><li>Create a Note.jsx component to show a <code>&lt;div&gt;</code> element with a <code>&lt;h1&gt;</code> for a title and a <code>&lt;p&gt;</code> for the content.</li></ol></li></ul><h3 id="步骤1-5"><a href="#步骤1-5" class="headerlink" title="步骤1-5"></a>步骤1-5</h3><p>最终效果: <a href="https://codesandbox.io/s/keeper-app-part-1-starting-l1pp6?fontsize=14">这里</a></p><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>可以这样定义某个模块中的自定义变量:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Card</span>(<span class="hljs-params">props</span>) </span>&#123;  <span class="hljs-keyword">return</span> (    &lt;div&gt;      &lt;h2&gt;&#123;props.name&#125;&lt;/h2&gt;      &lt;img src=&#123;props.img&#125; alt=<span class="hljs-string">&quot;avatar_img&quot;</span> /&gt;      &lt;p&gt;&#123;props.tel&#125;&lt;/p&gt;      &lt;p&gt;&#123;props.email&#125;&lt;/p&gt;    &lt;/div&gt;  );&#125;ReactDOM.render(  &lt;div&gt;    &lt;h1&gt;My Contacts&lt;/h1&gt;    &lt;Card      name=<span class="hljs-string">&quot;Beyonce&quot;</span>      img=<span class="hljs-string">&quot;https://blackhistorywall.files.wordpress.com/2010/02/picture-device-independent-bitmap-119.jpg&quot;</span>      tel=<span class="hljs-string">&quot;+123 456 789&quot;</span>      email=<span class="hljs-string">&quot;b@beyonce.com&quot;</span>    /&gt;    &lt;Card      name=<span class="hljs-string">&quot;Jack Bauer&quot;</span>      img=<span class="hljs-string">&quot;https://pbs.twimg.com/profile_images/625247595825246208/X3XLea04_400x400.jpg&quot;</span>      tel=<span class="hljs-string">&quot;+7387384587&quot;</span>      email=<span class="hljs-string">&quot;jack@nowhere.com&quot;</span>    /&gt;  &lt;/div&gt;,  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));</code></pre><p>Props之于React, 类似于Attribute之于HTML,</p><p>对比:</p><table><thead><tr><th>Props</th><th>React</th></tr></thead><tbody><tr><td><code>document.getElementById(&quot;email&quot;)</code><br><code>.id</code><br><code>.placeholder</code><br><code>.value</code></td><td><code>&lt;input</code><br><code> id = &quot;email&quot;,</code><br><code> placeholder = &quot;email here&quot;,</code><br><code> value = &quot;123@gmail.com&quot;</code><br><code>/&gt;</code></td></tr></tbody></table><table><thead><tr><th>Props</th><th>React</th></tr></thead><tbody><tr><td><code>function Card(props) &#123;</code><br><code>return (</code><br><code>&lt;div&gt;</code><br><code>&lt;h2&gt;&#123;props.name&#125;&lt;/h2&gt;</code><br><code>&lt;p&gt;&#123;props.tel&#125;&lt;/p&gt;</code><br><code>&lt;p&gt;&#123;props.email&#125;&lt;/p&gt;</code><br><code>&lt;/div&gt;</code><br><code>);</code><br><code>&#125;</code></td><td><code>&lt;Card</code><br><code>name=&quot;Beyonce&quot;</code><br><code>tel=&quot;+123 456 789&quot;</code><br><code>email=&quot;b@beyonce.com&quot;</code><br><code>/&gt;</code></td></tr></tbody></table><p>一顿修改, 直接看最终代码: <a href="https://codesandbox.io/s/react-props-practice-completed-c6fkx?fontsize=14">这里</a></p><h1 id="React-DevTools"><a href="#React-DevTools" class="headerlink" title="React DevTools"></a>React DevTools</h1><p> 一个chrome上的插件, <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?utm_source=chrome-ntp-icon">React Dev Tools</a></p><p> 可以用于查看react项目的树形结构(模块结构)</p><h1 id="Mapping-Components"><a href="#Mapping-Components" class="headerlink" title="Mapping Components"></a>Mapping Components</h1><p>直接看代码 <a href="https://codesandbox.io/s/mapping-components-y6z4c?fontsize=14">这里</a></p><p>注意, 这里在<Card>模块中设置了一个名为id的变量,这是<code>&#123;contacts.map(createCard)&#125;</code>里的map方法所要求的.</p><p>(map方法类似于一个loop,遍历查找contacts里的元素,如果有符合createCard()的,便渲染)</p><pre><code class="hljs JavaScript"></code></pre>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
      <tag>REACT</tag>
      
      <tag>Real Project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>REACT</title>
    <link href="/blog.github.io/2020/10/05/REACT/"/>
    <url>/blog.github.io/2020/10/05/REACT/</url>
    
    <content type="html"><![CDATA[<h1 id="REACT-js笔记"><a href="#REACT-js笔记" class="headerlink" title="REACT.js笔记"></a>REACT.js笔记</h1><blockquote><p>React is an open-source, front end, JavaScript library for building user interfaces or UI components.</p></blockquote><p>便捷工具: <a href="https://codesandbox.io/">codesandbox</a> 在浏览器内编辑和测试react项目</p><h3 id="开始-hello-world"><a href="#开始-hello-world" class="headerlink" title="开始: hello world:"></a>开始: hello world:</h3><p>以hello world程序开始作为介绍:</p><p>index.html</p><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;  &lt;head&gt;    &lt;title&gt;JSX&lt;/title&gt;    &lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;styles.css&quot;</span> /&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;&lt;/div&gt;    &lt;script src=<span class="hljs-string">&quot;../src/index.js&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>index.js</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;ReactDOM.render(  &lt;div&gt;    &lt;h1&gt;Hello World!&lt;/h1&gt;    &lt;p&gt;This is a paragraph.&lt;/p&gt;  &lt;/div&gt;,  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));</code></pre><p>在js中import两个重要的包react和react-dom</p><p>import相当于之前定的require.</p><p>调用ReactDOM.render()  , 渲染到html文件中的名为”root”的<div></p><p>ReactDOM.render()中只能渲染一段html的expression语句,所以用<div>括起来.</p><p>这被称为JSX, 即JavaScript XML. JSX 允许在react中写HTML.</p><p>不仅可以在js里写html, 还可以在html里再写js:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<span class="hljs-keyword">const</span> fName = <span class="hljs-string">&quot;An&quot;</span>;<span class="hljs-keyword">const</span> lName = <span class="hljs-string">&quot;Y&quot;</span>;<span class="hljs-keyword">const</span> num = <span class="hljs-number">7</span>;ReactDOM.render(  &lt;div&gt;    &lt;h1&gt;Hello &#123;fName + <span class="hljs-string">&quot; &quot;</span> + lName&#125;!&lt;/h1&gt;    &lt;p&gt;Your lucky number is &#123;num&#125;&lt;/p&gt;  &lt;/div&gt;,  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));</code></pre><h3 id="JSX-Attributes-and-Styling"><a href="#JSX-Attributes-and-Styling" class="headerlink" title="JSX Attributes and Styling"></a>JSX Attributes and Styling</h3><p>添加一些css和新元素:</p><pre><code class="hljs css"><span class="hljs-selector-class">.heading</span> &#123;  <span class="hljs-attribute">color</span>: red;&#125;<span class="hljs-selector-tag">ul</span> &#123;  <span class="hljs-attribute">color</span>: blue;&#125;<span class="hljs-selector-class">.food-img</span> &#123;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;</code></pre><p>需要注意:原本在html中管用的一些attribute名称需要修改为适合JSX的, 可查表获得对应.</p><p>如 <code>&lt;h1 name=&quot;heading&quot;&gt;</code> 需改为 <code>&lt;h1 className=&quot;heading&quot;&gt;</code></p><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<span class="hljs-keyword">const</span> img = <span class="hljs-string">&quot;https://picsum.photos/200&quot;</span>;ReactDOM.render(  &lt;div&gt;    &lt;h1 className=<span class="hljs-string">&quot;heading&quot;</span>&gt;My Favourite Foods&lt;/h1&gt;    &lt;img alt=<span class="hljs-string">&quot;random&quot;</span> src=&#123;img + <span class="hljs-string">&quot;?grayscale&quot;</span>&#125; /&gt;    &lt;img      className=<span class="hljs-string">&quot;food-img&quot;</span>      alt=<span class="hljs-string">&quot;bacon&quot;</span>      src=<span class="hljs-string">&quot;https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/delish-190621-air-fryer-bacon-0035-landscape-pf-1567632709.jpg?crop=0.645xw:0.967xh;0.170xw,0.0204xh&amp;resize=480:*&quot;</span>    /&gt;    &lt;img      className=<span class="hljs-string">&quot;food-img&quot;</span>      alt=<span class="hljs-string">&quot;jamon&quot;</span>      src=<span class="hljs-string">&quot;https://images-na.ssl-images-amazon.com/images/I/71lNrnbMXsL._SL1200_.jpg&quot;</span>    /&gt;    &lt;img      className=<span class="hljs-string">&quot;food-img&quot;</span>      alt=<span class="hljs-string">&quot;noodles&quot;</span>      src=<span class="hljs-string">&quot;https://www.errenskitchen.com/wp-content/uploads/2014/04/quick-and-easy-chinese-noodle-soup3-1.jpg&quot;</span>    /&gt;  &lt;/div&gt;,  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));</code></pre><p>也可以不在css中定义styling, 而采用<em>Inline Styling</em>:</p><p>注意,color: “red”外有两层{}</p><pre><code class="hljs JavaScript">ReactDOM.render(  &lt;h1 style=&#123;&#123;<span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>&#125;&#125;&gt;Hello World!&lt;/h1&gt;,  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));</code></pre><p>也可以:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> customStyle = &#123;  color: <span class="hljs-string">&quot;red&quot;</span>,  fontSize: <span class="hljs-string">&quot;20px&quot;</span>,  border: <span class="hljs-string">&quot;1px solid black&quot;</span>&#125;;ReactDOM.render(  &lt;h1 style=&#123;customStyle&#125;&gt;Hello World!&lt;/h1&gt;,  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));</code></pre><p>customStyle可以修改赋值:</p><pre><code class="hljs JavaScript">customStyle.color = <span class="hljs-string">&quot;blue&quot;</span>;</code></pre><h3 id="React-Components"><a href="#React-Components" class="headerlink" title="React Components"></a>React Components</h3><p>REACT的特点之一就是模块化, 将一些会被重复利用的代码作为模块重复使用,</p><p>继续以上面的项目为例, 进行模块化处理:</p><p>components文件夹下将有三个模块:</p><p>App.JSX 包括heading和list</p><p>Heading.JSX</p><p>List.JSX</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-keyword">import</span> Heading <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Heading&quot;</span>;<span class="hljs-keyword">import</span> List <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./List&quot;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> (    &lt;div&gt;      &lt;Heading /&gt;      &lt;List /&gt;      &lt;List /&gt;    &lt;/div&gt;  );&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;</code></pre><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Heading</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Favourite Foods<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Heading;</code></pre><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> (    &lt;ul&gt;      &lt;li&gt;Bacon&lt;/li&gt;      &lt;li&gt;Jamon&lt;/li&gt;      &lt;li&gt;Noodles&lt;/li&gt;    &lt;/ul&gt;  );&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> List;</code></pre><p>index.js主文件中调用渲染APP模块</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/App&quot;</span>;ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));</code></pre><h3 id="Import-和-export"><a href="#Import-和-export" class="headerlink" title="Import 和 export"></a>Import 和 export</h3><p>新建一个 自己的 math.js</p><p>默认输出pi, 其他输出{ doublePi, triplePi }</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> pi = <span class="hljs-number">3.1415962</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doublePi</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> pi * <span class="hljs-number">2</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">triplePi</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> pi * <span class="hljs-number">3</span>;&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> pi;<span class="hljs-keyword">export</span> &#123; doublePi, triplePi &#125;;</code></pre><p>在主文件中可以这么调用:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<span class="hljs-keyword">import</span> pi, &#123; doublePi, triplePi &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./math.js&quot;</span>;ReactDOM.render(  &lt;ul&gt;    &lt;li&gt;&#123;pi&#125;&lt;/li&gt;    &lt;li&gt;&#123;doublePi()&#125;&lt;/li&gt;    &lt;li&gt;&#123;triplePi()&#125;&lt;/li&gt;  &lt;/ul&gt;,  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));</code></pre><p>也可以这样:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> pi <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./math.js&quot;</span>;ReactDOM.render(  &lt;ul&gt;    &lt;li&gt;&#123;pi.default&#125;&lt;/li&gt;    &lt;li&gt;&#123;pi.doublePi()&#125;&lt;/li&gt;    &lt;li&gt;&#123;pi.triplePi()&#125;&lt;/li&gt;  &lt;/ul&gt;,  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));</code></pre><h1 id="WINDOWS下配置本地React-JS环境"><a href="#WINDOWS下配置本地React-JS环境" class="headerlink" title="WINDOWS下配置本地React JS环境"></a>WINDOWS下配置本地React JS环境</h1><p>最新的node</p><p>最新的VS code</p><p>VS code推荐安装两个extension: sublime babel和 vscode-icons</p><p>新建React项目: cd到目标目录 <code>npx create-react-app my-app</code></p><p>完成后, cd到my-app, <code>npm start</code> 运行app</p><p>vs code打开项目目录</p><p>已经默认建立了一些文件,我们对项目文件进行精简:</p><p>public下只保留index.html</p><p>scr下只保留index.js</p><p>精简index .htlm 和 .js :</p><pre><code class="hljs JavaScript">&lt;!DOCTYPE html&gt;&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;  &lt;head&gt;    &lt;title&gt;React App&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;script src=<span class="hljs-string">&quot;./src/index.js&quot;</span> type=<span class="hljs-string">&quot;text/jsx&quot;</span>&gt;&lt;/script&gt;    &lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;&lt;/div&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h</span>&gt;</span>hello wolrd<span class="hljs-tag">&lt;/<span class="hljs-name">h</span>&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>));</code></pre>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
      <tag>REACT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB</title>
    <link href="/blog.github.io/2020/10/05/MongoDB/"/>
    <url>/blog.github.io/2020/10/05/MongoDB/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB笔记"><a href="#MongoDB笔记" class="headerlink" title="MongoDB笔记"></a>MongoDB笔记</h1><hr><p>2020-Sep-25<br>Complete Web Development Bootcamp on Udemy<br><a href="https://www.udemy.com/course/the-complete-web-development-bootcamp/">https://www.udemy.com/course/the-complete-web-development-bootcamp/</a></p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>MongoDB网站下载镜像: <a href="https://www.mongodb.com/try/download/community">MongoDB网站</a></p><p>安装在默认位置: C:\Program Files\MongoDB\Server\4.4\data\</p><p>安装完成后, 在C盘下新建名为data的文件夹, data下新建名为db的文件夹</p><p>命令行中, <code>cd ~</code></p><p>然后新建 .bash_profile文件 <code>toch .bash_profile</code></p><p>用vim打开, <code>vim .bash_profile</code></p><p><code>i</code> 进入编辑模式, 粘贴以下代码:</p><p><code>/4.X</code>修改为实际版本号</p><pre><code>alias mongod=&quot;/c/Program\ files/MongoDB/Server/4.X/bin/mongod.exe&quot;alias mongo=&quot;/c/Program\ Files/MongoDB/Server/4.X/bin/mongo.exe&quot;</code></pre><p><code>esc</code>键, 之后<code>:wq!</code>保存</p><p>重启命令行, <code>mongo --version</code>检查是否安装成功.</p><h1 id="基本使用操作"><a href="#基本使用操作" class="headerlink" title="基本使用操作"></a>基本使用操作</h1><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><code>mongod</code> 启动mongo</p><p>将显示信息:</p><pre><code>Waiting for connections&quot;,&quot;attr&quot;:&#123;&quot;port&quot;:27017</code></pre><p>即此时已经成功启动,等待连接, 端口是27017</p><p>持续运行保持命令行不关闭</p><h3 id="启动Mongo-shell"><a href="#启动Mongo-shell" class="headerlink" title="启动Mongo shell"></a>启动Mongo shell</h3><p><code>mongo</code> 启动mongo shell</p><p>我们可以在&gt;之后键入指令</p><h3 id="mongo-shell-中操作"><a href="#mongo-shell-中操作" class="headerlink" title="mongo shell 中操作"></a>mongo shell 中操作</h3><p><code>show dbs</code> 显示已有databases</p><p><code>use shopDB</code> 新建/切换到某个database. 刚新建之后利用<code>show dbs</code>查询不显示, 因为刚新建没有数据</p><p><code>db</code> 显示当前所在db</p><p><code>show collections</code> 显示db下所有table(或collections)</p><p><code>db.dropDatabase()</code> 删除当前数据库</p><h5 id="增"><a href="#增" class="headerlink" title="增:"></a>增:</h5><p>新建table,和第一行数据:</p><p><code>db.products.insertOne(&#123; _id: 1, name: &quot;Pen&quot;, price: 1.20&#125;)</code></p><h5 id="查"><a href="#查" class="headerlink" title="查:"></a>查:</h5><p>查看table中数据:</p><p><code>db.products.find()</code></p><p>根据条件,查看table中数据:</p><p><code>db.products.find(&#123;name: &quot;Pencil&quot;&#125;)</code></p><p><code>db.products.find(&#123;price: &#123;$gt: 1.0&#125;&#125;)</code>  价格大于1的</p><p>或者指定展示哪些列, {_id: 1}或{_id: 0}表示是否展示这一列:<br><code>db.products.find(&#123;_id: 1&#125;, &#123;name: 1&#125;)</code></p><p>其他query符:</p><ul><li><code>$eq</code> Matches values that are equal to a specified value.  </li><li><code>$gt</code>    Matches values that are greater than a specified value.  </li><li><code>$gte</code>    Matches values that are greater than or equal to a specified value.  </li><li><code>$in</code>    Matches any of the values specified in an array.  </li><li><code>$lt</code>    Matches values that are less than a specified value.  </li><li><code>$lte</code>    Matches values that are less than or equal to a specified value.  </li><li><code>$ne</code>    Matches all values that are not equal to a specified value.  </li><li><code>$nin</code>    Matches none of the values specified in an array.  </li></ul><h5 id="改"><a href="#改" class="headerlink" title="改:"></a>改:</h5><p>为_id为2的行添加自己的一列, 名为stock, 数值32 (之前并没有这一列),<br>(操作后只有这一行数据有这一列信息.这是mongoDB不同于SQL的).<br><code>db.products.updateOne(&#123;_id:2&#125;, &#123;$set: &#123;stock: 32&#125;&#125;)</code></p><h5 id="删"><a href="#删" class="headerlink" title="删:"></a>删:</h5><p>db.products.delteOne({id: 2})</p><h3 id="MongoDB中数据的特殊结构"><a href="#MongoDB中数据的特殊结构" class="headerlink" title="MongoDB中数据的特殊结构"></a>MongoDB中数据的特殊结构</h3><p>可以这样定义一行数据:<br>一个产品,包括对他的两个顾客评价:</p><pre><code class="hljs sql">db.products.insert(  &#123;    _id: 3,    name: &quot;ruby&quot;,    price: 2.3,    stock: 22,    review: [      &#123;        author: &quot;Jack&quot;,        rating: 4,        review: &quot;Good!&quot;      &#125;,      &#123;        author: &quot;Tom&quot;,        rating: 5,        review: &quot;Nice one!&quot;      &#125;    ]  &#125;)</code></pre><h1 id="MondDb与Node-Js协作"><a href="#MondDb与Node-Js协作" class="headerlink" title="MondDb与Node Js协作"></a>MondDb与Node Js协作</h1><p>连接MondDb与Node Js的两种方式:</p><ul><li>MongoDB native driver(复杂,不常用)</li><li>Mongoose(一种ODM Object Document Mapper,代码简洁,常用)</li></ul><h3 id="MongoDB-native-driver"><a href="#MongoDB-native-driver" class="headerlink" title="MongoDB native driver:"></a><del>MongoDB native driver:</del></h3><p><del>代码复杂…</del></p><h3 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose:"></a>Mongoose:</h3><h5 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h5><p>首先项目根目录下<code>npm install mongoose</code>安装包</p><p>app.js主文件如下:</p><blockquote><p>将会新建(若有则修改)一个数据库fruitsDB. 数据库中创建一个叫fuits的table. Table中新增一行name为Apple的数据.</p></blockquote><pre><code class="hljs JavaScript"><span class="hljs-comment">//引用mongoose</span><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<span class="hljs-comment">//连接在本地已经启动的数据库</span>mongoose.connect(<span class="hljs-string">&quot;mongodb://localhost:27017/fruitsDB&quot;</span>, &#123; <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span>&#125;);<span class="hljs-comment">//后面两个为true的参数是根据Mongo所报warn被要求添加的.未来版本mongo可能会消失</span><span class="hljs-comment">//准备一个数据结构模板</span><span class="hljs-keyword">const</span> fruitSchema = <span class="hljs-keyword">new</span> mongoose.Schema (&#123;  name: <span class="hljs-built_in">String</span>,  rating: <span class="hljs-built_in">Number</span>,  review: <span class="hljs-built_in">String</span>&#125;);<span class="hljs-comment">//在数据库中以&quot;Fruit&quot;建立table, mongo会根据&quot;fruit&quot;智能地建立名为fruits(复数形式)的table</span><span class="hljs-keyword">const</span> Fruit = mongoose.model(<span class="hljs-string">&quot;Fruit&quot;</span>, fruitSchema);<span class="hljs-comment">//一个准备写入table的一行新数据</span><span class="hljs-keyword">const</span> fruit = <span class="hljs-keyword">new</span> Fruit(&#123;  name: <span class="hljs-string">&quot;Apple&quot;</span>,  rating: <span class="hljs-number">7</span>,  review: <span class="hljs-string">&quot;Pretty solid as a fruit.&quot;</span>&#125;);<span class="hljs-comment">//写入这一行</span>fruit.save();</code></pre><p>若同时多个数据需要插入, 可使用语句:<br>callback函数用来报错</p><pre><code class="hljs JavaScript">Fruit.insertMany([kiwi, orange, apple], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;  <span class="hljs-keyword">if</span> (err)&#123;    <span class="hljs-built_in">console</span>.log(err);  &#125;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Successfully save all&quot;</span>);&#125;)</code></pre><p>可添加一下语句:<br>打印出所有fruits表格内的数据行</p><pre><code class="hljs JavaScript">Fruit.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, fruits</span>)</span>&#123;  <span class="hljs-keyword">if</span> (err)&#123;    <span class="hljs-built_in">console</span>.log(err);  &#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-built_in">console</span>.log(fruits);  &#125;&#125;);</code></pre><p>或者这样, 只打印出数据行的名字:</p><pre><code class="hljs JavaScript">Fruit.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, fruits</span>)</span>&#123;  <span class="hljs-keyword">if</span> (err)&#123;    <span class="hljs-built_in">console</span>.log(err);  &#125;<span class="hljs-keyword">else</span>&#123;    fruits.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fruit</span>)</span>&#123;      <span class="hljs-built_in">console</span>.log(fruit.name)    &#125;);  &#125;&#125;);</code></pre><p>最后不要忘了关闭与数据库的连接, 否则将一直保持连接.</p><pre><code class="hljs JavaScript">mongoose.connection.close();</code></pre><p>完整代码如下:</p><pre><code class="hljs JavaScript"><span class="hljs-comment">//引用mongoose</span><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<span class="hljs-comment">//连接在本地已经启动的数据库</span>mongoose.connect(<span class="hljs-string">&quot;mongodb://localhost:27017/fruitsDB&quot;</span>, &#123; <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span>&#125;);<span class="hljs-comment">//后面两个为true的参数是根据Mongo所报warn被要求添加的.未来版本mongo可能会消失</span><span class="hljs-comment">//准备一个数据结构模板</span><span class="hljs-keyword">const</span> fruitSchema = <span class="hljs-keyword">new</span> mongoose.Schema (&#123;  name: <span class="hljs-built_in">String</span>,  rating: <span class="hljs-built_in">Number</span>,  review: <span class="hljs-built_in">String</span>&#125;);<span class="hljs-comment">//在数据库中以&quot;Fruit&quot;建立table, mongo会根据&quot;fruit&quot;智能地建立名为fruits(复数形式)的table</span><span class="hljs-keyword">const</span> Fruit = mongoose.model(<span class="hljs-string">&quot;Fruit&quot;</span>, fruitSchema);<span class="hljs-comment">//一个准备写入table的一行新数据</span><span class="hljs-keyword">const</span> apple = <span class="hljs-keyword">new</span> Fruit(&#123;  name: <span class="hljs-string">&quot;Apple&quot;</span>,  rating: <span class="hljs-number">7</span>,  review: <span class="hljs-string">&quot;Pretty solid as a fruit.&quot;</span>&#125;);<span class="hljs-comment">//另一行</span><span class="hljs-keyword">const</span> kiwi = <span class="hljs-keyword">new</span> Fruit(&#123;  name: <span class="hljs-string">&quot;kiwi&quot;</span>,  rating: <span class="hljs-number">2</span>,  review: <span class="hljs-string">&quot;Not good.&quot;</span>&#125;);<span class="hljs-comment">//写入多行</span>Fruit.insertMany([kiwi, apple], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;  <span class="hljs-keyword">if</span> (err)&#123;    <span class="hljs-built_in">console</span>.log(err);  &#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Successfully save all&quot;</span>);  &#125;&#125;)<span class="hljs-comment">//打印出所有fruits表格内的数据行(的name)</span>Fruit.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, fruits</span>)</span>&#123;  <span class="hljs-keyword">if</span> (err)&#123;    <span class="hljs-built_in">console</span>.log(err);  &#125;<span class="hljs-keyword">else</span>&#123;    fruits.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fruit</span>)</span>&#123;      <span class="hljs-built_in">console</span>.log(fruit.name)      mongoose.connection.close(); <span class="hljs-comment">//关闭与数据库的连接</span>    &#125;);  &#125;&#125;);</code></pre><h5 id="进一步-Data-validation数据验证"><a href="#进一步-Data-validation数据验证" class="headerlink" title="进一步: Data validation数据验证"></a>进一步: Data validation数据验证</h5><p>原代码中:</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fruitSchema = <span class="hljs-keyword">new</span> mongoose.Schema (&#123;  name: <span class="hljs-built_in">String</span>,  rating: <span class="hljs-built_in">Number</span>,  review: <span class="hljs-built_in">String</span>&#125;);</code></pre><p>可以对某个数据的格式进行规定:</p><p>规定rating为numer类型, 最小1最大10</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fruitSchema = <span class="hljs-keyword">new</span> mongoose.Schema (&#123;  name: <span class="hljs-built_in">String</span>,  rating: &#123;    type: <span class="hljs-built_in">Number</span>,    min: <span class="hljs-number">1</span>,    max: <span class="hljs-number">10</span>  &#125;,  review: <span class="hljs-built_in">String</span>&#125;);</code></pre>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
      <tag>Database</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript code Example</title>
    <link href="/blog.github.io/2020/10/05/JavaScript-code-Example/"/>
    <url>/blog.github.io/2020/10/05/JavaScript-code-Example/</url>
    
    <content type="html"><![CDATA[<h1 id="JS代码案例"><a href="#JS代码案例" class="headerlink" title="JS代码案例"></a>JS代码案例</h1><hr><p>2020-Sep-21<br>Complete Web Development Bootcamp on Udemy<br><a href="https://www.udemy.com/course/the-complete-web-development-bootcamp/">https://www.udemy.com/course/the-complete-web-development-bootcamp/</a><br>JavaScript example sentences  </p><hr><p>选择h1字体的内容 改变颜色:</p><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;h1&quot;</span>).style.color = <span class="hljs-string">&quot;yellow&quot;</span></code></pre><p>选择a锚 获得链接中的地址:</p><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;a&quot;</span>).getAttribute(<span class="hljs-string">&quot;href&quot;</span>);</code></pre><p>选择a锚 设置链接中的地址 设置为google:</p><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;a&quot;</span>).setAttribute(<span class="hljs-string">&quot;href&quot;</span>, <span class="hljs-string">&quot;https://google.com&quot;</span>);类似的:<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;img&quot;</span>)[<span class="hljs-number">1</span>].setAttribute(<span class="hljs-string">&quot;src&quot;</span>, randomImageSource2);</code></pre><p>选择h1字体的内容 将它html中的文本段改为Good bye. 即: <code>&lt;h1&gt;blue sky&lt;/h1&gt;</code> 变为<code>&lt;h1&gt;Good bye&lt;/h1&gt;</code></p><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;h1&quot;</span>).innerHTML = <span class="hljs-string">&quot;Good bye&quot;</span>;</code></pre><p>选择h1字体的内容 将它html中的文本段改为<em>Good bye</em>. 即: <code>&lt;h1&gt;blue sky&lt;/h1&gt;</code> 变为<code>&lt;h1&gt;&lt;em&gt;Good bye&lt;/em&gt;&lt;/h1&gt;</code></p><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;h1&quot;</span>).innerHTML = <span class="hljs-string">&quot;&lt;em&gt;Good bye&lt;em&gt;&quot;</span>;</code></pre><p>选择h1字体的内容 返回文本内容:</p><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;h1&quot;</span>).textContent;</code></pre><p>取随机数:</p><pre><code class="hljs javascript"><span class="hljs-built_in">Math</span>.random();</code></pre><p>取整数:</p><pre><code class="hljs javascript"><span class="hljs-built_in">Math</span>.floor();</code></pre><p>if else else 语句:</p><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (randomNumber1 &gt; randomNumber2) &#123;  ;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (randomNumber2 &gt; randomNumber1) &#123;  ;&#125; <span class="hljs-keyword">else</span> &#123;  ;&#125;</code></pre><p>为一个button设置一个listener, click时触发handleClick. 第一句时handleClick后不需要(),否则将会直接被触发,而不是click后</p><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;button&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, handleClick);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>) </span>&#123;  alert(<span class="hljs-string">&quot;hello&quot;</span>);&#125;</code></pre><p>如何为所有button添加Listener??<br>获知html中名为.drum类的按钮的元素的数量</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> numberOfButton = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;.drum&quot;</span>).length;</code></pre><p>或让selector寻找button</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> numberOfButton = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;button&quot;</span>).length;</code></pre><p>然后,为所有的这些元素设置Listener, click将触发 handleClick函数  </p><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &amp;lt; numberOfButton; i++) &#123;  <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;.drum&quot;</span>)[i].addEventListener(<span class="hljs-string">&quot;click&quot;</span>, handleClick);&#125;</code></pre><p>讲一个函数作为另一个函数的参数:</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multiply</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;  <span class="hljs-keyword">return</span> num1 \* num2;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">divide</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;  <span class="hljs-keyword">return</span> num1 / num2;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculator</span>(<span class="hljs-params">num1, num2, operator</span>) </span>&#123;  <span class="hljs-keyword">return</span> operator(num1, num2);&#125;</code></pre><p>JS里播放声音:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> audio = <span class="hljs-keyword">new</span> Audio(<span class="hljs-string">&#x27;crash.mp3&#x27;</span>);audio.play();</code></pre><p>JS中的多媒体:</p><pre><code class="hljs javascript">HTMLAudioElementHTMLAudioElement.play()HTMLAudioElement.autoplay()HTMLAudioElement.pause()</code></pre><p>类与对象:<br>JS 类的构造函数</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Boy</span>(<span class="hljs-params">name, age, language</span>) </span>&#123;  <span class="hljs-built_in">this</span>.name = name;  <span class="hljs-built_in">this</span>.age = age;  <span class="hljs-built_in">this</span>.language = language;&#125;</code></pre><p>类的实例:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> boy1 = <span class="hljs-keyword">new</span> Boy(<span class="hljs-string">&quot;Tommy&quot;</span>, <span class="hljs-number">18</span>, [<span class="hljs-string">&quot;French&quot;</span>, <span class="hljs-string">&quot;English&quot;</span>]);</code></pre><p>switch语句:<br>判断键盘什么键被按下</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> buttonInnerHTML = <span class="hljs-built_in">this</span>.innerHTML;<span class="hljs-keyword">switch</span> (buttonInnerHTML) &#123;  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;w&quot;</span>:    <span class="hljs-keyword">var</span> audio1 = <span class="hljs-keyword">new</span> Audio(<span class="hljs-string">&#x27;1.mp3&#x27;</span>);    audio1.play();  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;s&quot;</span>:    <span class="hljs-keyword">var</span> audio2 = <span class="hljs-keyword">new</span> Audio(<span class="hljs-string">&#x27;2.mp3&#x27;</span>);    audio2.play();  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;d&quot;</span>:    <span class="hljs-keyword">var</span> audio3 = <span class="hljs-keyword">new</span> Audio(<span class="hljs-string">&#x27;3.mp3&#x27;</span>);    audio3.play();    <span class="hljs-keyword">break</span>;  <span class="hljs-keyword">default</span>:&#125;</code></pre><p>为整个网站添加键盘的EventListener:<br>此处<code>function()&#123;...&#125;</code> 是一个anonymous function 匿名函数  </p><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&quot;keypress&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;alert(<span class="hljs-string">&quot;key is pressed!&quot;</span>)&#125;);</code></pre><p>回调函数 callback 案例:</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomething</span>(<span class="hljs-params">msg, callback</span>)</span>&#123;    alert(msg);    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> callback == <span class="hljs-string">&quot;function&quot;</span>)    callback(); &#125;doSomething(<span class="hljs-string">&quot;回调函数&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    alert(<span class="hljs-string">&quot;匿名函数实现回调!&quot;</span>); &#125;);</code></pre><p>案例:<br>键盘按下时, 报告事件详情<br>event中将包括很多信息, event.key将返回键名的字符,如”w”  </p><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&quot;keypress&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<span class="hljs-built_in">console</span>.log(event)&#125;);</code></pre><p>jQuery 等同于$</p><pre><code class="hljs javascript">jQuery(<span class="hljs-string">&quot;h1&quot;</span>);$(<span class="hljs-string">&quot;h1&quot;</span>);</code></pre><p>等待jQuery加载成功, 之后执行.js文件中的语句:</p><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  $(<span class="hljs-string">&quot;h1&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);&#125;)</code></pre><p>等同于将&lt;script src=”…””&gt;</script>在</body>之前引用, 即<body>部分的最后引用. 而不同于在<head>中引用</p><p>添加一个css中的class, 改变字体:</p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).addClass(<span class="hljs-string">&quot;big-title&quot;</span>);</code></pre><p>删除一个class</p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).removeClass(<span class="hljs-string">&quot;big-title&quot;</span>);</code></pre><p>添加两个class</p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).addClass(<span class="hljs-string">&quot;big-title margin-50&quot;</span>);</code></pre><p>查看对象是否属于某个class, 返回值为boolean</p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).hasClass(<span class="hljs-string">&quot;margin-50&quot;</span>);</code></pre><p>jQuery中更改文本:</p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).text(<span class="hljs-string">&quot;morning&quot;</span>);</code></pre><p>或者更改innerHTML:</p><pre><code class="hljs JavaScript">$(<span class="hljs-string">&quot;h1&quot;</span>).html(<span class="hljs-string">&quot;&lt;em&gt;morning&lt;/em&gt;&quot;</span>);</code></pre><p>获取attribute 参数:  </p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;img&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>);  <span class="hljs-comment">//img链接向谁?  </span>$(<span class="hljs-string">&quot;img&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>);    <span class="hljs-comment">//img 所属class是?</span><span class="hljs-string">``</span><span class="hljs-string">`  </span><span class="hljs-string">设置attribute 参数, &lt;a&gt;指向 google.com  </span><span class="hljs-string">`</span><span class="hljs-string">``</span>javascript$(<span class="hljs-string">&quot;a&quot;</span>).attr(<span class="hljs-string">&quot;href&quot;</span>, <span class="hljs-string">&quot;&lt;http://googlw.com&quot;</span>&gt;);<span class="hljs-string">``</span><span class="hljs-string">`  </span><span class="hljs-string"></span><span class="hljs-string">jQuery设置Event listener:  </span><span class="hljs-string">`</span><span class="hljs-string">``</span>javascript$(<span class="hljs-string">&quot;h1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  $(<span class="hljs-string">&quot;h1&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>);&#125;);</code></pre><p>jQuery为多个button设置event listener时, 不需要for语句遍历  </p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  $(<span class="hljs-string">&quot;h1&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>);&#125;);</code></pre><p>鼠标移动至目标上方时, callback函数:  </p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).on(<span class="hljs-string">&quot;mouseover&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  $(<span class="hljs-string">&quot;h1&quot;</span>).text(<span class="hljs-string">&quot;lll&quot;</span>);&#125;);</code></pre><p>使用jQuery在html段中添加或删除元素. 原句: <code>&lt;h1&gt;Hello&lt;/h1&gt;</code><br>4种添加:  </p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).before(<span class="hljs-string">&quot;&lt;button&gt;click&lt;/button&gt;&quot;</span>); <span class="hljs-comment">//将会变成:</span>&lt;button&gt;click&lt;<span class="hljs-regexp">/button&gt;&lt;h1&gt;Hello&lt;/</span>h1&gt;<span class="hljs-string">``</span><span class="hljs-string">`  </span><span class="hljs-string"></span><span class="hljs-string">`</span><span class="hljs-string">``</span>javascript$(<span class="hljs-string">&quot;h1&quot;</span>).after(<span class="hljs-string">&quot;&lt;button&gt;click&lt;/button&gt;&quot;</span>);<span class="hljs-comment">//将会变成:</span>&lt;h1&gt;Hello&lt;<span class="hljs-regexp">/h1&gt;&lt;button&gt;click&lt;/</span>button&gt;<span class="hljs-string">``</span><span class="hljs-string">`  </span><span class="hljs-string"></span><span class="hljs-string">`</span><span class="hljs-string">``</span>javascript$(<span class="hljs-string">&quot;h1&quot;</span>).prepend(<span class="hljs-string">&quot;&lt;button&gt;click&lt;/button&gt;&quot;</span>);<span class="hljs-comment">//将会变成:</span>&lt;h1&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>Hello&lt;/h1&gt;<span class="hljs-string">``</span><span class="hljs-string">`  </span><span class="hljs-string"></span><span class="hljs-string">`</span><span class="hljs-string">``</span>javascript$(<span class="hljs-string">&quot;h1&quot;</span>).append(<span class="hljs-string">&quot;&lt;button&gt;click&lt;/button&gt;&quot;</span>);<span class="hljs-comment">//将会变成:</span>&lt;h1&gt;Hello&lt;button&gt;click&lt;<span class="hljs-regexp">/button&gt;&lt;/</span>h1&gt;<span class="hljs-string">``</span><span class="hljs-string">`  </span><span class="hljs-string"></span><span class="hljs-string">1种删除:</span><span class="hljs-string">`</span><span class="hljs-string">``</span>javascript$(<span class="hljs-string">&quot;h1&quot;</span>).remove(<span class="hljs-string">&quot;button&quot;</span>);</code></pre><p>jQuery的一些动画操作 配合EventListener的动作<code>$(&quot;h1&quot;).on(&quot;mouseover&quot;, function()&#123;...&#125;);</code><br>更多搜索jQuery Effect Methods<br>隐藏/恢复(触发开关)  </p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).hide();$(<span class="hljs-string">&quot;h1&quot;</span>).toggle();</code></pre><p>淡入淡出:</p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).fadeOut();$(<span class="hljs-string">&quot;h1&quot;</span>).fadeIn();</code></pre><p>划入,划出,触发开关:</p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).slideUp();$(<span class="hljs-string">&quot;h1&quot;</span>).slideDown();$(<span class="hljs-string">&quot;h1&quot;</span>).slideToggle();</code></pre><p>css上的渐变动画:</p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).animate(&#123;<span class="hljs-attr">opacity</span>:<span class="hljs-number">0.5</span>&#125;);$(<span class="hljs-string">&quot;h1&quot;</span>).animate(&#123;<span class="hljs-attr">margin</span>:<span class="hljs-number">20</span>%&#125;);</code></pre><p>连续动画:</p><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;h1&quot;</span>).slideUp().fadeDown().animate(&#123;<span class="hljs-attr">opacity</span>:<span class="hljs-number">0.5</span>&#125;);</code></pre><p>响应GET时, 如何返回多条html语句:<br>使用write(), 再send()  </p><pre><code class="hljs javascript">app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;  res.write(<span class="hljs-string">&quot;&lt;p&gt;hello one&lt;/p&gt;&quot;</span>);  res.write(<span class="hljs-string">&quot;&lt;h1&gt;hello two&lt;/h1&gt;&quot;</span>);  res.send();&#125;);</code></pre>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EJS</title>
    <link href="/blog.github.io/2020/10/05/EJS/"/>
    <url>/blog.github.io/2020/10/05/EJS/</url>
    
    <content type="html"><![CDATA[<h1 id="EJS相关笔记"><a href="#EJS相关笔记" class="headerlink" title="EJS相关笔记"></a>EJS相关笔记</h1><hr><h3 id="初始化ejs"><a href="#初始化ejs" class="headerlink" title="初始化ejs"></a>初始化ejs</h3><hr><p>首先在项目根目录下安装ejs包<br><code>npm install ejs</code><br>之后编辑app.js主文件: express()实例化之后添加语段:  </p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = express();app.set(<span class="hljs-string">&quot;view engine&quot;</span>, <span class="hljs-string">&quot;ejs&quot;</span>);</code></pre><p>另外,项目根目录下新建名为views的文件夹里,所有的.ejs文件将放在这里, view engine将会默认查看它们<br><code>app.get(&quot;/&quot;, function(req, res) &#123;....&#125;);</code>返回response时,<br>添加语句:  </p><pre><code class="hljs javascript">res.render(<span class="hljs-string">&#x27;list&#x27;</span>, &#123;<span class="hljs-attr">kindOfDay</span>: day&#125;);</code></pre><p>EJS会使用view engine来渲染名为list的.ejs文件(类似于原本的list.html)<br>这样是在声明.ejs中的kindOfDay即是app.js中的day<br>list.ejs被称为一个模板, 它根据app.js中传输的day来改变,决定向用户如何显示.<br>此时代码为:  </p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>); <span class="hljs-comment">//引用npm包express</span><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>); <span class="hljs-comment">//引用npm包body-parser</span><span class="hljs-keyword">const</span> app = express(); <span class="hljs-comment">//实例化express</span>app.set(<span class="hljs-string">&quot;view engine&quot;</span>, <span class="hljs-string">&quot;ejs&quot;</span>);app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;  <span class="hljs-keyword">var</span> today = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();  <span class="hljs-keyword">var</span> currentDay = today.getDay();  <span class="hljs-keyword">var</span> day = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">if</span> (currentDay === <span class="hljs-number">6</span> || currentDay === <span class="hljs-number">0</span>) &#123;    day=<span class="hljs-string">&quot;Weekend&quot;</span>;  &#125; <span class="hljs-keyword">else</span> &#123;    day=<span class="hljs-string">&quot;Weekday&quot;</span>;  &#125;  res.render(<span class="hljs-string">&#x27;list&#x27;</span>, &#123;    kindOfDay: day  &#125;);&#125;);app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server is running on port 3000!   &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getHours() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getMinutes() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getSeconds());&#125;);</code></pre><hr><h3 id="在-ejs文件中运行js代码-逻辑语句"><a href="#在-ejs文件中运行js代码-逻辑语句" class="headerlink" title="在.ejs文件中运行js代码(逻辑语句)"></a>在.ejs文件中运行js代码(逻辑语句)</h3><hr><p>需要将每一行contrl flow语句 (js代码) 包括在 &lt;% ….%&gt;中<br>不同于声明参数对应关系时使用的的&lt;%= …. %&gt;<br>原代码:  </p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;ltr&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>To Do List<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    if(kindOfDay === &quot;Saturday&quot; || kindOfDay === &quot;Sunday&quot;)&#123;      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: purple&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">kindOfDay</span>%&gt;</span> ToDo List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    &#125;else&#123;      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">kindOfDay</span>%&gt;</span> ToDo List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    &#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>需要修改为:</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;ltr&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>To Do List<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">if</span>(<span class="hljs-attr">kindOfDay</span> === <span class="hljs-string">&quot;Saturday&quot;</span> || <span class="hljs-attr">kindOfDay</span> === <span class="hljs-string">&quot;Sunday&quot;</span>)&#123; %&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: purple&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">kindOfDay</span>%&gt;</span> ToDo List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125;<span class="hljs-attr">else</span>&#123; %&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">kindOfDay</span>%&gt;</span> ToDo List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
      <tag>EJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database &amp; SQL</title>
    <link href="/blog.github.io/2020/10/05/Database-SQL/"/>
    <url>/blog.github.io/2020/10/05/Database-SQL/</url>
    
    <content type="html"><![CDATA[<h1 id="Database以及SQL笔记"><a href="#Database以及SQL笔记" class="headerlink" title="Database以及SQL笔记"></a>Database以及SQL笔记</h1><hr><p>2020-Sep-24<br>Complete Web Development Bootcamp on Udemy<br><a href="https://www.udemy.com/course/the-complete-web-development-bootcamp/">https://www.udemy.com/course/the-complete-web-development-bootcamp/</a></p><hr><h3 id="使用node-js和database对比"><a href="#使用node-js和database对比" class="headerlink" title="使用node js和database对比"></a>使用node js和database对比</h3><p>database的数据是静态储存于本地的, 不会重载浏览器而消失</p><h3 id="SQL和NoSQL对比"><a href="#SQL和NoSQL对比" class="headerlink" title="SQL和NoSQL对比"></a>SQL和NoSQL对比</h3><ul><li>SQL更适合复杂结构. 代表工具: <em>MySQL</em></li><li>NoSQL更灵活. 代表工具: <em>MongoDB</em></li></ul><h3 id="SQL-文档资源-工具"><a href="#SQL-文档资源-工具" class="headerlink" title="SQL 文档资源/工具"></a>SQL 文档资源/工具</h3><p><a href="https://www.w3schools.com/sql/">w3school</a><br><a href="https://www.sqliteonline.com/">在线sql工具</a></p><h1 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h1><p>四个操作: 增删改查</p><h4 id="增"><a href="#增" class="headerlink" title="增:"></a>增:</h4><p>创建表格:</p><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products&#123;  <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-keyword">name</span> <span class="hljs-keyword">STRING</span>,  price MONEY,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-keyword">id</span>)&#125;</code></pre><p>FOREIGN KEY:</p><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> orders&#123;  <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,  order_number <span class="hljs-built_in">INT</span>,  customer_id <span class="hljs-built_in">INT</span>,  product_id <span class="hljs-built_in">INT</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-keyword">id</span>)  <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> customer_id <span class="hljs-keyword">REFERENCES</span> customer(<span class="hljs-keyword">id</span>),  <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> product_id <span class="hljs-keyword">REFERENCES</span> products(<span class="hljs-keyword">id</span>)  <span class="hljs-comment">-- 设置foreign key,与别的表格相关联</span>&#125;</code></pre><p>插入一行数据:</p><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> products<span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;pen&quot;</span>, <span class="hljs-number">1.20</span>)</code></pre><p>或是插入一行数据(指定部分数据):</p><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> products(<span class="hljs-keyword">id</span>, price)<span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,  <span class="hljs-number">1.20</span>)</code></pre><h3 id="查"><a href="#查" class="headerlink" title="查:"></a>查:</h3><p>查看所有</p><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1</span></code></pre><p>选择查看</p><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span>, price <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1</span></code></pre><p>JOIN:</p><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> order.order_number, customers.first_name, customers.last_name, customers.address<span class="hljs-keyword">FROM</span> orders<span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> customers <span class="hljs-keyword">ON</span> orders.customer_id = customer_id</code></pre><h3 id="改"><a href="#改" class="headerlink" title="改:"></a>改:</h3><p>修改某行:</p><pre><code class="hljs SQL"><span class="hljs-keyword">UPDATE</span> products<span class="hljs-keyword">SET</span> price = <span class="hljs-number">0.8</span><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">2</span></code></pre><p>新增一列:</p><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> products<span class="hljs-keyword">ADD</span> stock <span class="hljs-built_in">INT</span></code></pre><h3 id="删"><a href="#删" class="headerlink" title="删:"></a>删:</h3><pre><code class="hljs SQL"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> products<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">2</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Authentication &amp; Sercurity</title>
    <link href="/blog.github.io/2020/10/05/Authentication-Sercurity/"/>
    <url>/blog.github.io/2020/10/05/Authentication-Sercurity/</url>
    
    <content type="html"><![CDATA[<h1 id="Authentication-amp-Sercurity笔记"><a href="#Authentication-amp-Sercurity笔记" class="headerlink" title="Authentication &amp; Sercurity笔记"></a>Authentication &amp; Sercurity笔记</h1><h2 id="多层安全"><a href="#多层安全" class="headerlink" title="多层安全:"></a>多层安全:</h2><ul><li>level 1: Email &amp; Password</li><li>level 2: Encryption</li><li>level 3: Hash</li><li>level 4: Salting and Hashing</li><li>level 5: Cookies &amp; Sessions</li><li>level 6: OAuth 第三方网站授权( ….未完成)</li></ul><h2 id="level-1-Email-amp-Password"><a href="#level-1-Email-amp-Password" class="headerlink" title="level 1: Email &amp; Password"></a>level 1: Email &amp; Password</h2><p>()依靠数据库信息)</p><p>项目目录下:<br><code>npm i mongoose</code></p><p>然后,主文件中载入mongoose, 两段代码:</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);</code></pre><pre><code class="hljs javascript">mongoose.connect(<span class="hljs-string">&quot;mongodb://localhost:27017/fruitsDB&quot;</span>, &#123; <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span>&#125;);</code></pre><p>之后写get /register:</p><pre><code class="hljs javascript">app.post(<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> newUser = <span class="hljs-keyword">new</span> User(&#123;    email: req.body.username,    password: req.body.password  &#125;);  newUser.save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.render(<span class="hljs-string">&quot;secrets&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;);</code></pre><p>之后写POST /register:</p><pre><code class="hljs javascript">app.post(<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> newUser = <span class="hljs-keyword">new</span> User(&#123;    email: req.body.username,    password: req.body.password  &#125;);  newUser.save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.render(<span class="hljs-string">&quot;secrets&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;);</code></pre><p>和POST /login</p><pre><code class="hljs javascript">app.post(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> username = req.body.username;  <span class="hljs-keyword">const</span> password = req.body.password;  User.findOne(&#123;<span class="hljs-attr">email</span>: username&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,foundUser</span>)</span>&#123;    <span class="hljs-keyword">if</span>(err)&#123;      <span class="hljs-built_in">console</span>.log(err);    &#125;<span class="hljs-keyword">else</span>&#123;      <span class="hljs-keyword">if</span>(foundUser)&#123;        <span class="hljs-keyword">if</span> (foundUser.password === password)&#123;          res.render(<span class="hljs-string">&quot;secrets&quot;</span>);        &#125;      &#125;    &#125;  &#125;)&#125;);</code></pre><p style="color:red;">此时, 密码是以明文普通文本保存. 危险性大</p><h2 id="level-2-Encryption"><a href="#level-2-Encryption" class="headerlink" title="level 2: Encryption"></a>level 2: Encryption</h2><p>各种加密方式, 这里选用mongoose-encryption包:</p><p>安装: <code>npm i mongoose-encryption</code></p><p>主文件中:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> encrypt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose-encryption&quot;</span>);</code></pre><p>然后,根据要求改写schema格式:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> userSchema = <span class="hljs-keyword">new</span> mongoose.Schema(&#123;  email: <span class="hljs-built_in">String</span>,  password: <span class="hljs-built_in">String</span>&#125;);</code></pre><p>随意建立一个字符串,作为密码种子:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> secret = <span class="hljs-string">&quot;Thisisourlittlesecret.&quot;</span>;</code></pre><p>然后,加密密码(使用种子):<br>encryption是mongoose的一个插件</p><pre><code class="hljs javascript">userSchema.plugin( encrypt, &#123;<span class="hljs-attr">secret</span>: secret, <span class="hljs-attr">encryptedFields</span>:[<span class="hljs-string">&quot;password&quot;</span>]&#125; );</code></pre><p>测试运行, 发现新用户注册后数据库内数据的密码部分不再是普通文本, 而变成了二进制串.</p><p style="color:red;">但这种方式,加密种子仍然能被他人获知</p><p>我们可以采用enviroment variables来解决.</p><p>安装包: <code>npm i dotenv</code></p><p>在主文件最上方插入代码:</p><pre><code class="hljs JavaScript"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dotenv&#x27;</span>).config(); <span class="hljs-comment">//必须加在最上面</span></code></pre><p>接着,项目根目录下创建文件 .env: <code>touch .env</code></p><p>将主文件中的密码种子剪切粘贴到.env文件:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> secret = <span class="hljs-string">&quot;Thisisourlittlesecret.&quot;</span>;</code></pre><p>===&gt;</p><pre><code class="hljs JavaScript">SECRET = Thisisourlittlesecret.</code></pre><p>其他的一些重要内容之后也可以保存在这, 例如 API_KEY. 建议保持大写和_的格式</p><p>主文件中若想调用, 则可使用格式为:</p><pre><code class="hljs JavaScript">process.env.API_KEY;</code></pre><p>所以, 主文件中代码变为:</p><pre><code class="hljs JavaScript">userSchema.plugin( encrypt, &#123;<span class="hljs-attr">secret</span>: process.env.SECRET, <span class="hljs-attr">encryptedFields</span>:[<span class="hljs-string">&quot;password&quot;</span>]&#125; );</code></pre><p>接下来, 采用设置gitignore的方法, 使部分文件在git push的时候不上传,从而保密.</p><p>下面的连接是官方文档, 告诉一些类型的项目那些内容可以ignore:</p><p><a href="https://github.com/github/gitignore">gitignore 连接</a></p><p>我们是nodeJS项目, 所以选择Node.采用设置gitignore</p><p><a href="https://github.com/github/gitignore/blob/master/Node.gitignore">Node.gitignore</a></p><p>有一些文件通常需要ignore:</p><ul><li><p>node_modules/</p></li><li><p>jspm_packages/</p></li><li><p>.env</p></li></ul><p>在项目根目录下新建.gitignore文件 <code>touch .gitignore</code></p><p>在里面直接粘贴node.gitignore里面的文字,保存</p><p>可以看到, atom里, 左侧文件管理中的.env文件颜色变浅, 说明隐藏成功</p><p>之后可以push到github上. 另外,因为github会保留修改记录, 之前普通文本所写的信息依然会被看到,</p><p>因此需要每一次建立项目时就创建environment variables.</p><p>另外, 一些网站托管服务器(如Heroku)有自己的方法储存envi vars, 有时有可视化界面供设置.</p><p>目前完整代码如下:</p><pre><code class="hljs JavaScript"><span class="hljs-comment">//jshint esversion:6</span><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dotenv&#x27;</span>).config(); <span class="hljs-comment">//必须加在最上面</span><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);           <span class="hljs-comment">//引用npm包express</span><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);    <span class="hljs-comment">//引用npm包body-parser</span><span class="hljs-keyword">const</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ejs&quot;</span>);           <span class="hljs-comment">//引用npm包request</span><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<span class="hljs-keyword">const</span> encrypt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose-encryption&quot;</span>);<span class="hljs-keyword">const</span> app = express();app.use(express.static(<span class="hljs-string">&quot;public&quot;</span>));app.set(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);app.use(bodyParser.urlencoded(&#123;  extended: <span class="hljs-literal">true</span>&#125;));mongoose.connect(<span class="hljs-string">&quot;mongodb://localhost:27017/userDB&quot;</span>, &#123; <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span>&#125;);<span class="hljs-keyword">const</span> userSchema = <span class="hljs-keyword">new</span> mongoose.Schema(&#123;  email: <span class="hljs-built_in">String</span>,  password: <span class="hljs-built_in">String</span>&#125;);userSchema.plugin( encrypt, &#123;<span class="hljs-attr">secret</span>: process.env.SECRET, <span class="hljs-attr">encryptedFields</span>:[<span class="hljs-string">&quot;password&quot;</span>]&#125; );<span class="hljs-keyword">const</span> User = <span class="hljs-keyword">new</span> mongoose.model(<span class="hljs-string">&quot;User&quot;</span>, userSchema);app.get(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.render(<span class="hljs-string">&quot;home&quot;</span>);&#125;);app.get(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.render(<span class="hljs-string">&quot;login&quot;</span>);&#125;);app.get(<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.render(<span class="hljs-string">&quot;register&quot;</span>);&#125;);app.post(<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> newUser = <span class="hljs-keyword">new</span> User(&#123;    email: req.body.username,    password: req.body.password  &#125;);  newUser.save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.render(<span class="hljs-string">&quot;secrets&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;);app.post(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> username = req.body.username;  <span class="hljs-keyword">const</span> password = req.body.password;  User.findOne(&#123;<span class="hljs-attr">email</span>: username&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,foundUser</span>)</span>&#123;    <span class="hljs-keyword">if</span>(err)&#123;      <span class="hljs-built_in">console</span>.log(err);    &#125;<span class="hljs-keyword">else</span>&#123;      <span class="hljs-keyword">if</span>(foundUser)&#123;        <span class="hljs-keyword">if</span> (foundUser.password === password)&#123;          res.render(<span class="hljs-string">&quot;secrets&quot;</span>);        &#125;      &#125;    &#125;  &#125;)&#125;);app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server started on port 3000&quot;</span>);&#125;);</code></pre><h3 id="level-3-Hash"><a href="#level-3-Hash" class="headerlink" title="level 3: Hash"></a>level 3: Hash</h3><p>归根到底, 密码种子总有可能被得到而解密</p><p>可以使用Hash方法:</p><p>添加包 <code>npm i md5</code></p><p>主文件内, 移除加密语段</p><pre><code class="hljs css"><span class="hljs-selector-tag">userSchema</span><span class="hljs-selector-class">.plugin</span>( <span class="hljs-selector-tag">encrypt</span>, &#123;<span class="hljs-attribute">secret</span>: process.env.SECRET, encryptedFields:[<span class="hljs-string">&quot;password&quot;</span>]&#125; );</code></pre><p>添加引用md5:</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> md5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;md5&quot;</span>);</code></pre><p>修改 POST /register 方法,使得存入数据库的密码是一个hash数:</p><pre><code class="hljs javascript">app.post(<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> newUser = <span class="hljs-keyword">new</span> User(&#123;    email: req.body.username,    password: md5(req.body.password)    <span class="hljs-comment">//hash一下</span>  &#125;);  newUser.save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.render(<span class="hljs-string">&quot;secrets&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;);</code></pre><p>以及 POST /login 方法,使得以一个hash数与数据库中的进行对比:</p><pre><code class="hljs javascript">app.post(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> username = req.body.username;  <span class="hljs-keyword">const</span> password = md5(req.body.password);    <span class="hljs-comment">//hash一下</span>  User.findOne(&#123;<span class="hljs-attr">email</span>: username&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,foundUser</span>)</span>&#123;    <span class="hljs-keyword">if</span>(err)&#123;      <span class="hljs-built_in">console</span>.log(err);    &#125;<span class="hljs-keyword">else</span>&#123;      <span class="hljs-keyword">if</span>(foundUser)&#123;        <span class="hljs-keyword">if</span> (foundUser.password === password)&#123;          res.render(<span class="hljs-string">&quot;secrets&quot;</span>);        &#125;      &#125;    &#125;  &#125;)&#125;);</code></pre><h2 id="level-4-Salting-and-Hashing"><a href="#level-4-Salting-and-Hashing" class="headerlink" title="level 4 Salting and Hashing"></a>level 4 Salting and Hashing</h2><p>需要改进, hash需要加盐</p><p>项目目录下, 添加包: <code>npm i bcrypt</code></p><p>主文件修改代码:</p><pre><code class="hljs JavaScript"><span class="hljs-comment">// const md5 = require(&quot;md5&quot;);        //改用bcrypt</span><span class="hljs-keyword">const</span> bcrypt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;bcrypt&quot;</span>);<span class="hljs-keyword">const</span> saltRounds = <span class="hljs-number">10</span>;</code></pre><p>加盐的round数更大更安全, 只是消耗的时间更长</p><p>修改 POST /register 方法,使得存入数据库的密码是一个加盐的hash数:</p><pre><code class="hljs javascript">app.post(<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> newUser = <span class="hljs-keyword">new</span> User(&#123;    email: req.body.username,    password: md5(req.body.password)    <span class="hljs-comment">//hash一下</span>  &#125;);  newUser.save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(!err)&#123;      res.render(<span class="hljs-string">&quot;secrets&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      res.send(err);    &#125;  &#125;);&#125;);</code></pre><h2 id="level-5-Cookies-amp-Sessions"><a href="#level-5-Cookies-amp-Sessions" class="headerlink" title="level 5: Cookies &amp; Sessions"></a>level 5: Cookies &amp; Sessions</h2><p>cookies中常包括一些用户信息:</p><p>例如用户浏览并添加在购物车中的信息, GET /方法时候会连同cookies一同发给服务器,</p><p>服务器会根据cookie中的信息回应用户, 包括意向物品的信息.</p><p>Session是client和server交互的一段时间.</p><p>添加passport包来使用cookie: 以及一些其他的包:</p><pre><code class="hljs elm"><span class="hljs-title">npm</span> i pass<span class="hljs-keyword">port</span><span class="hljs-title">npm</span> i pass<span class="hljs-keyword">port</span>-local<span class="hljs-title">npm</span> i pass<span class="hljs-keyword">port</span>-local-mongoose<span class="hljs-title">npm</span> i express-session</code></pre><p>注意包的准确的拼写</p><p>主文件中, 移除代码:</p><pre><code class="hljs JavaScript"><span class="hljs-comment">// const bcrypt = require(&quot;bcrypt&quot;);   //改用passport</span><span class="hljs-comment">// const saltRounds = 10; //改用passport</span></code></pre><p>添加:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>);<span class="hljs-keyword">const</span> passport = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;passport&#x27;</span>);<span class="hljs-keyword">const</span> passporLocalMongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;passport-local-mongoose&#x27;</span>);</code></pre><p>设置session:</p><pre><code class="hljs JavaScript">app.use(session(&#123;  secret:  <span class="hljs-string">&quot;Our little secret&quot;</span>,  resave: <span class="hljs-literal">false</span>,  saveUninitialized: <span class="hljs-literal">false</span>&#125;));</code></pre><p>设置passport:</p><pre><code class="hljs JavaScript">app.use(passport, initialized());app.use(passport.session());</code></pre><p>对UserSchema处理, 加盐hash储存在数据库中:</p><pre><code class="hljs JavaScript">userSchema.plugin(passporLocalMongoose);</code></pre><p>passport处理:</p><pre><code class="hljs JavaScript">passport.use(User.createStrategy());passport.serializeUser(User.serializeUser());passport.deserializeUser(User.deserializeUser());</code></pre><p>运行app.js, 系统报错<code>(node:13412) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.</code></p><p>google可知, 需要添加语句:</p><pre><code class="hljs JavaScript">mongoose.set(<span class="hljs-string">&quot;useCreateIndex&quot;</span>, <span class="hljs-literal">true</span>);</code></pre><p>接下来修改post /register 方法:</p><pre><code class="hljs JavaScript">app.post(<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  User.register(&#123;<span class="hljs-attr">username</span>: req.body.username&#125;, req.body.password, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, user</span>)</span>&#123;    <span class="hljs-keyword">if</span>(err)&#123;      <span class="hljs-built_in">console</span>.log(err);      res.redirect(<span class="hljs-string">&quot;/register&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      passport.authenticate(<span class="hljs-string">&quot;local&quot;</span>)(req, res, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        res.redirect(<span class="hljs-string">&quot;/secrets&quot;</span>);      &#125;);    &#125;  &#125;);&#125;);</code></pre><p>添加get /secret 方法:</p><pre><code class="hljs JavaScript">app.get(<span class="hljs-string">&quot;/secrets&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">if</span>(req.isAuthenticated())&#123;    res.render(<span class="hljs-string">&quot;secrets&quot;</span>);  &#125;<span class="hljs-keyword">else</span>&#123;    res.render(<span class="hljs-string">&quot;/login&quot;</span>);  &#125;&#125;);</code></pre><p>这时候运行, register一个新用户, 在数据库内查看,将会发现新的一行多了一个salt和hash的参数和数值.</p><p>此时, 回到主页之后,地址栏中可以直接访问<code>http://localhost:3000/secrets</code>,这就是因为cookies记住了我们网站的已登陆状态.</p><p>如果退出浏览器(ctrl+q), 再进入,再次访问/secrets的话,则会转到login页面.</p><p>这时候, 修改post /login 方法:</p><pre><code class="hljs JavaScript">app.post(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> User(&#123;    username: req.body.username,    password: req.body.password  &#125;);  req.login(user, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(err)&#123;      <span class="hljs-built_in">console</span>.log(err);    &#125;<span class="hljs-keyword">else</span>&#123;      passport.authenticate(<span class="hljs-string">&quot;local&quot;</span>)(req, res, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        res.redirect(<span class="hljs-string">&quot;/secrets&quot;</span>);      &#125;);    &#125;  &#125;);&#125;);</code></pre><p>添加get /logout 方法:</p><pre><code class="hljs JavaScript">app.get(<span class="hljs-string">&quot;/logout&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  req.logout();  res.redirect(<span class="hljs-string">&quot;/&quot;</span>);&#125;);</code></pre><p>最后的完整代码为:</p><pre><code class="hljs JavaScript"><span class="hljs-comment">//jshint esversion:6</span><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dotenv&#x27;</span>).config(); <span class="hljs-comment">//必须加在最上面</span><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);           <span class="hljs-comment">//引用npm包express</span><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);    <span class="hljs-comment">//引用npm包body-parser</span><span class="hljs-keyword">const</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ejs&quot;</span>);           <span class="hljs-comment">//引用npm包request</span><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<span class="hljs-comment">// const encrypt = require(&quot;mongoose-encryption&quot;);    //改用hash方法加密了</span><span class="hljs-comment">// const md5 = require(&quot;md5&quot;);        //改用bcrypt</span><span class="hljs-comment">// const bcrypt = require(&quot;bcrypt&quot;);   //改用passport</span><span class="hljs-comment">// const saltRounds = 10; //改用passport</span><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>);<span class="hljs-keyword">const</span> passport = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;passport&#x27;</span>);<span class="hljs-keyword">const</span> passporLocalMongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;passport-local-mongoose&#x27;</span>);<span class="hljs-keyword">const</span> app = express();app.use(express.static(<span class="hljs-string">&quot;public&quot;</span>));app.set(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);app.use(bodyParser.urlencoded(&#123;  extended: <span class="hljs-literal">true</span>&#125;));app.use(session(&#123;  secret:  <span class="hljs-string">&quot;Our little secret&quot;</span>,  resave: <span class="hljs-literal">false</span>,  saveUninitialized: <span class="hljs-literal">false</span>&#125;));app.use(passport.initialize());app.use(passport.session());mongoose.connect(<span class="hljs-string">&quot;mongodb://localhost:27017/userDB&quot;</span>, &#123; <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span>&#125;);mongoose.set(<span class="hljs-string">&quot;useCreateIndex&quot;</span>, <span class="hljs-literal">true</span>);<span class="hljs-keyword">const</span> userSchema = <span class="hljs-keyword">new</span> mongoose.Schema(&#123;  email: <span class="hljs-built_in">String</span>,  password: <span class="hljs-built_in">String</span>&#125;);userSchema.plugin(passporLocalMongoose);<span class="hljs-keyword">const</span> User = <span class="hljs-keyword">new</span> mongoose.model(<span class="hljs-string">&quot;User&quot;</span>, userSchema);passport.use(User.createStrategy());passport.serializeUser(User.serializeUser());passport.deserializeUser(User.deserializeUser());app.get(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.render(<span class="hljs-string">&quot;home&quot;</span>);&#125;);app.get(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.render(<span class="hljs-string">&quot;login&quot;</span>);&#125;);app.get(<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.render(<span class="hljs-string">&quot;register&quot;</span>);&#125;);app.get(<span class="hljs-string">&quot;/secrets&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">if</span>(req.isAuthenticated())&#123;    res.render(<span class="hljs-string">&quot;secrets&quot;</span>);  &#125;<span class="hljs-keyword">else</span>&#123;    res.redirect(<span class="hljs-string">&quot;/login&quot;</span>);  &#125;&#125;);app.get(<span class="hljs-string">&quot;/logout&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  req.logout();  res.redirect(<span class="hljs-string">&quot;/&quot;</span>);&#125;);app.post(<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  User.register(&#123;<span class="hljs-attr">username</span>: req.body.username&#125;, req.body.password, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, user</span>)</span>&#123;    <span class="hljs-keyword">if</span>(err)&#123;      <span class="hljs-built_in">console</span>.log(err);      res.redirect(<span class="hljs-string">&quot;/register&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      passport.authenticate(<span class="hljs-string">&quot;local&quot;</span>)(req, res, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        res.redirect(<span class="hljs-string">&quot;/secrets&quot;</span>);      &#125;);    &#125;  &#125;);&#125;);app.post(<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> User(&#123;    username: req.body.username,    password: req.body.password  &#125;);  req.login(user, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;    <span class="hljs-keyword">if</span>(err)&#123;      <span class="hljs-built_in">console</span>.log(err);    &#125;<span class="hljs-keyword">else</span>&#123;      passport.authenticate(<span class="hljs-string">&quot;local&quot;</span>)(req, res, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        res.redirect(<span class="hljs-string">&quot;/secrets&quot;</span>);      &#125;);    &#125;  &#125;);&#125;);app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server started on port 3000&quot;</span>);&#125;);</code></pre><h2 id="level-6-OAuth-第三方网站授权"><a href="#level-6-OAuth-第三方网站授权" class="headerlink" title="level 6: OAuth 第三方网站授权"></a>level 6: OAuth 第三方网站授权</h2>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Publish app to Web</title>
    <link href="/blog.github.io/2020/10/05/Publish-app-to-Web/"/>
    <url>/blog.github.io/2020/10/05/Publish-app-to-Web/</url>
    
    <content type="html"><![CDATA[<h1 id="app发布至网络-Heroku为例"><a href="#app发布至网络-Heroku为例" class="headerlink" title="app发布至网络_Heroku为例"></a>app发布至网络_Heroku为例</h1><h3 id="入门-在网络上发布app-利用heroku网站"><a href="#入门-在网络上发布app-利用heroku网站" class="headerlink" title="入门: 在网络上发布app, 利用heroku网站"></a>入门: 在网络上发布app, 利用heroku网站</h3><p>官方网站安装heroku  </p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>heroku login</code></pre><p>首先, app.js中的语句修改为:  </p><pre><code class="hljs javascript">app.listen(process.env.PORT, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;);<span class="hljs-comment">//根据托管服务器的环境确定端口,或在3000本地收听</span></code></pre><p>然后,根据Heroku网站要求,需要在项目根目录下新建一个Procfile的文件, 无后缀名<br>文件中输入<code>web: node app.js</code>, 告诉网站以何种方式运行主文件<br>完成之后, 需要初始化heroku:  <code>heroku create</code></p><p>之后需要初始化git:</p><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span>git <span class="hljs-keyword">add</span> .git commit -m <span class="hljs-string">&quot;first commit&quot;</span></code></pre><p>之后需要push到heroku  </p><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> heroky master</code></pre><p>成功后,结果中将出现网址,即可访问</p>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
      <tag>Heroku</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Create a SignUp page for Web App</title>
    <link href="/blog.github.io/2020/10/05/Create-a-SignUp-page-for-Web-App/"/>
    <url>/blog.github.io/2020/10/05/Create-a-SignUp-page-for-Web-App/</url>
    
    <content type="html"><![CDATA[<h1 id="新建signUp页面为例"><a href="#新建signUp页面为例" class="headerlink" title="新建signUp页面为例"></a>新建signUp页面为例</h1><h3 id="回应GET-请求-指向html文件"><a href="#回应GET-请求-指向html文件" class="headerlink" title="回应GET / 请求, 指向html文件:"></a>回应GET / 请求, 指向html文件:</h3><p>前接上篇 笔记.txt 新建一个web app</p><p>编辑app.js主文件:</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);           <span class="hljs-comment">//引用npm包express</span><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);    <span class="hljs-comment">//引用npm包body-parser</span><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>);           <span class="hljs-comment">//引用npm包request</span><span class="hljs-keyword">const</span> app = express();                        <span class="hljs-comment">//实例化express</span>app.get(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.sendFile(__dirname + <span class="hljs-string">&quot;/signup.html&quot;</span>);&#125;);                                 <span class="hljs-comment">//当收听到GET/时, callback函数将发送文件singup.html作为回复</span>                                    <span class="hljs-comment">//路径中加入__dirname防止错误</span>app.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server is running on port 3000!!!!&quot;</span>);&#125;);                                           <span class="hljs-comment">//在网络3000口上收听,如成功则log显示信息</span></code></pre><p>此时若运行程序, 浏览器中.css和img无法加载<br><strong>重要</strong>:这是因为未将它们设置为静态<br>需要添加语句, 并创建public文件夹:  </p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);           <span class="hljs-comment">//引用npm包express</span><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);    <span class="hljs-comment">//引用npm包body-parser</span><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>);           <span class="hljs-comment">//引用npm包request</span><span class="hljs-keyword">const</span> app = express();                        <span class="hljs-comment">//实例化express</span>app.use(express.static(<span class="hljs-string">&quot;public&quot;</span>));            <span class="hljs-comment">//将public文件夹设置为静态.</span><span class="hljs-comment">//需要手动建立一个项目根目录下的public文件夹,其中包括images和css两个子文件夹,放入所有css和图片</span>app.get(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.sendFile(__dirname + <span class="hljs-string">&quot;/signup.html&quot;</span>);&#125;);app.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server is running on port 3000!!!!&quot;</span>);&#125;);                                           <span class="hljs-comment">//在网络3000口上收听,如成功则log显示信息</span></code></pre><p>修改之后, 可能需要将原来的一些href=”…\styles.csss”路径修改<br><strong>重要</strong>: 但不需要在最前面加上 public/</p><h3 id="回应POST-请求-返回表格中的数据"><a href="#回应POST-请求-返回表格中的数据" class="headerlink" title="回应POST / 请求, 返回表格中的数据:"></a>回应POST / 请求, 返回表格中的数据:</h3><p>需要使用bodyParser, 添加语句:<br><code>app.use(bodyParser.urlencoded(&#123;extended:ture&#125;));</code></p><p>代码为:</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);           <span class="hljs-comment">//引用npm包express</span><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);    <span class="hljs-comment">//引用npm包body-parser</span><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>);           <span class="hljs-comment">//引用npm包request</span><span class="hljs-keyword">const</span> app = express();                        <span class="hljs-comment">//实例化express</span>app.use(bodyParser.urlencoded(&#123;<span class="hljs-attr">extended</span>:ture&#125;));    <span class="hljs-comment">//使用bodyParser使得url内容可使用(POST方法时必需)</span>app.use(express.static(<span class="hljs-string">&quot;public&quot;</span>));            <span class="hljs-comment">//将public文件夹设置为静态.</span><span class="hljs-comment">//需要手动建立一个项目根目录下的public文件夹,其中包括images和css两个子文件夹,放入所有css和图片</span>app.get(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.sendFile(__dirname + <span class="hljs-string">&quot;/signup.html&quot;</span>);&#125;);app.post(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;  <span class="hljs-keyword">var</span> fisrtName = req.body.fName;             <span class="hljs-comment">//获取html页面返回的数据(这是body-parser包的作用)</span>  <span class="hljs-keyword">var</span> lastName = req.body.lName;  <span class="hljs-keyword">var</span> email = req.body.email;  <span class="hljs-built_in">console</span>.log(fisrtName, lastName, email);&#125;);app.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server is running on port 3000!!!!&quot;</span>);&#125;);                                           <span class="hljs-comment">//在网络3000口上收听,如成功则log显示信息</span></code></pre><p>此时,勿要忘记修改html的部分:<br>为html中元素声明 name:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lName&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control middle&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Last Name&quot;</span> <span class="hljs-attr">required</span> &gt;</span></code></pre><p>将表格的action声明为/ , 将method声明为POST  </p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span></code></pre><p>接下来,准备建立一个request, 按照API要求的格式将数据写入,再传给外部服务器:</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>); <span class="hljs-comment">//引用npm包express</span><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>); <span class="hljs-comment">//引用npm包body-parser</span><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>); <span class="hljs-comment">//引用npm包request</span><span class="hljs-keyword">const</span> https = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;https&quot;</span>);     <span class="hljs-comment">//引用https, 才能利用API传输</span><span class="hljs-keyword">const</span> app = express(); <span class="hljs-comment">//实例化express</span>app.use(bodyParser.urlencoded(&#123;  extended: <span class="hljs-literal">true</span>&#125;)); <span class="hljs-comment">//使用bodyParser使得url内容可使用(POST方法时必需)</span>app.use(express.static(<span class="hljs-string">&quot;public&quot;</span>)); <span class="hljs-comment">//将public文件夹设置为静态.</span><span class="hljs-comment">//需要手动建立一个项目根目录下的public文件夹,其中包括images和css两个子文件夹,放入所有css和图片</span>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;  res.sendFile(__dirname + <span class="hljs-string">&quot;/signup.html&quot;</span>);&#125;);app.post(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;  <span class="hljs-keyword">const</span> firstName = req.body.fName;             <span class="hljs-comment">//获取html页面返回的数据(这是body-parser包的作用)</span>  <span class="hljs-keyword">const</span> lastName = req.body.lName;  <span class="hljs-keyword">const</span> email = req.body.email;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;用户已经输入: &quot;</span> +firstName, lastName, email);  <span class="hljs-keyword">const</span> data = &#123;    members:[                              <span class="hljs-comment">//查询所用API的文档可知我们需要存入的内容的格式.</span>      &#123;        email_address: email,             <span class="hljs-comment">//根据格式放入表格中获得的数据</span>        status:<span class="hljs-string">&quot;subscribed&quot;</span>,        merge_fields:&#123;          FNAME:firstName,          LNAME:lastName        &#125;      &#125;    ]  &#125;;  <span class="hljs-keyword">const</span> jsonData = <span class="hljs-built_in">JSON</span>.stringify(data);    <span class="hljs-comment">//将数据JSON化才能传给对方服务器</span>  <span class="hljs-comment">//技术文档可知api地址为 &quot;https://usX.api.mailchimp.com/3.0/lists&quot; , 需要修改usX, 加入list id</span>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;https://us2.api.mailchimp.com/3.0/lists/bf9926d032&quot;</span>;  <span class="hljs-comment">//技术文档可知,还需要一个名为option的参数</span>  <span class="hljs-keyword">const</span> options = &#123;    method:<span class="hljs-string">&quot;POST&quot;</span>,                                            <span class="hljs-comment">//post方法</span>    auth: <span class="hljs-string">&quot;yiding123:a997795bdfcc2d2be8dd9388511f51b8-us2&quot;</span>    <span class="hljs-comment">//验证信息, 任意取的一个user name + api key</span>  &#125;  <span class="hljs-keyword">const</span> request = https.request(url, options, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;     <span class="hljs-comment">//准备好一个将要发送的request</span>    <span class="hljs-comment">// response.on(&quot;data&quot;, function(data)&#123;</span>    <span class="hljs-comment">//   console.log(JSON.parse(data));                                  //打印出待发送内容</span>    <span class="hljs-comment">// &#125;)</span>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;已经写入request准备发出: &quot;</span> + data.members[<span class="hljs-number">0</span>].merge_fields.FNAME +<span class="hljs-string">&quot; &quot;</span>+data.members[<span class="hljs-number">0</span>].merge_fields.LNAME+<span class="hljs-string">&quot; &quot;</span>+data.members[<span class="hljs-number">0</span>].email_address);  &#125;);  request.write(jsonData);      <span class="hljs-comment">//写入, 传给外部服务器</span>  request.end();&#125;);<span class="hljs-comment">//MailChimp API KEY a997795bdfcc2d2be8dd9388511f51b8-us2</span><span class="hljs-comment">//Audience List id bf9926d032   mailchimp能够知道在什么地方加入你的订阅者</span>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server is running on port 3000!   &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getHours() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getMinutes() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getSeconds());&#125;); <span class="hljs-comment">//在网络3000口上收听,如成功则log显示信息</span></code></pre><h3 id="sign-up后-跳转成功或失败页面"><a href="#sign-up后-跳转成功或失败页面" class="headerlink" title="sign up后, 跳转成功或失败页面:"></a>sign up后, 跳转成功或失败页面:</h3><p>我们需要判断request之后的response, 是否成功,即是否status code 为200, 而不是404或其他<br>编辑代码,加入if判断:  </p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>); <span class="hljs-comment">//引用npm包express</span><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>); <span class="hljs-comment">//引用npm包body-parser</span><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>); <span class="hljs-comment">//引用npm包request</span><span class="hljs-keyword">const</span> https = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;https&quot;</span>);     <span class="hljs-comment">//引用https, 才能利用API传输</span><span class="hljs-keyword">const</span> app = express(); <span class="hljs-comment">//实例化express</span>app.use(bodyParser.urlencoded(&#123;  extended: <span class="hljs-literal">true</span>&#125;)); <span class="hljs-comment">//使用bodyParser使得url内容可使用(POST方法时必需)</span>app.use(express.static(<span class="hljs-string">&quot;public&quot;</span>)); <span class="hljs-comment">//将public文件夹设置为静态.</span><span class="hljs-comment">//需要手动建立一个项目根目录下的public文件夹,其中包括images和css两个子文件夹,放入所有css和图片</span>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;  res.sendFile(__dirname + <span class="hljs-string">&quot;/signup.html&quot;</span>);&#125;);app.post(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;  <span class="hljs-keyword">const</span> firstName = req.body.fName;             <span class="hljs-comment">//获取html页面返回的数据(这是body-parser包的作用)</span>  <span class="hljs-keyword">const</span> lastName = req.body.lName;  <span class="hljs-keyword">const</span> email = req.body.email;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;用户已经输入: &quot;</span> +firstName, lastName, email);  <span class="hljs-keyword">const</span> data = &#123;    members:[                              <span class="hljs-comment">//查询所用API的文档可知我们需要存入的内容的格式.</span>      &#123;        email_address: email,             <span class="hljs-comment">//根据格式放入表格中获得的数据</span>        status:<span class="hljs-string">&quot;subscribed&quot;</span>,        merge_fields:&#123;          FNAME:firstName,          LNAME:lastName        &#125;      &#125;    ]  &#125;;  <span class="hljs-keyword">const</span> jsonData = <span class="hljs-built_in">JSON</span>.stringify(data);    <span class="hljs-comment">//将数据JSON化才能传给对方服务器</span>  <span class="hljs-comment">//技术文档可知api地址为 &quot;https://usX.api.mailchimp.com/3.0/lists&quot; , 需要修改usX, 加入list id</span>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;https://us2.api.mailchimp.com/3.0/lists/bf9926d032&quot;</span>;  <span class="hljs-comment">//技术文档可知,还需要一个名为option的参数</span>  <span class="hljs-keyword">const</span> options = &#123;    method:<span class="hljs-string">&quot;POST&quot;</span>,                                            <span class="hljs-comment">//post方法</span>    auth: <span class="hljs-string">&quot;yiding123:!a997795bdfcc2d2be8dd9388511f51b8-us2&quot;</span>    <span class="hljs-comment">//验证信息, 任意取的一个user name + api key</span>  &#125;  <span class="hljs-keyword">const</span> request = https.request(url, options, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;     <span class="hljs-comment">//准备好一个将要发送的request</span>    <span class="hljs-keyword">if</span>(response.statusCode===<span class="hljs-number">200</span>)&#123;                                   <span class="hljs-comment">//判断是否发送成功</span>      res.sendFile(__dirname + <span class="hljs-string">&quot;/success.html&quot;</span>);                     <span class="hljs-comment">//相应跳转至不同页面</span>    &#125;<span class="hljs-keyword">else</span>&#123;      res.sendFile(__dirname + <span class="hljs-string">&quot;/failure.html&quot;</span>);    &#125;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;已经写入request准备发出: &quot;</span> + data.members[<span class="hljs-number">0</span>].merge_fields.FNAME +<span class="hljs-string">&quot; &quot;</span>+data.members[<span class="hljs-number">0</span>].merge_fields.LNAME+<span class="hljs-string">&quot; &quot;</span>+data.members[<span class="hljs-number">0</span>].email_address);  &#125;);  request.write(jsonData);      <span class="hljs-comment">//写入, 传给外部服务器</span>  request.end();&#125;);<span class="hljs-comment">//MailChimp API KEY a997795bdfcc2d2be8dd9388511f51b8-us2</span><span class="hljs-comment">//Audience List id bf9926d032   mailchimp能够知道在什么地方加入你的订阅者</span>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server is running on port 3000!   &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getHours() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getMinutes() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getSeconds());&#125;); <span class="hljs-comment">//在网络3000口上收听,如成功则log显示信息</span></code></pre><h3 id="若sign-up失败跳转至failure页面后-设置一个按钮跳转回index-html"><a href="#若sign-up失败跳转至failure页面后-设置一个按钮跳转回index-html" class="headerlink" title="若sign up失败跳转至failure页面后, 设置一个按钮跳转回index.html"></a>若sign up失败跳转至failure页面后, 设置一个按钮跳转回index.html</h3><p>应该在failure.html设置按钮, 并设置action和method:  </p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/failure&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning btn-lg&quot;</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Try agian!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><p>并在app.js主文件中, <code>app.post(&quot;/&quot;, function(req, res) &#123;......&#125;);</code>语段之后,<br>声明新的:  </p><pre><code class="hljs JavaScript">app.post(<span class="hljs-string">&quot;/failure&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.redirect(<span class="hljs-string">&quot;/&quot;</span>);&#125;);</code></pre><p>使重定向到”/“, (即重新 GET / )<br>app.js完整代码如下:  </p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>); <span class="hljs-comment">//引用npm包express</span><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>); <span class="hljs-comment">//引用npm包body-parser</span><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>); <span class="hljs-comment">//引用npm包request</span><span class="hljs-keyword">const</span> https = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;https&quot;</span>);     <span class="hljs-comment">//引用https, 才能利用API传输</span><span class="hljs-keyword">const</span> app = express(); <span class="hljs-comment">//实例化express</span>app.use(bodyParser.urlencoded(&#123;  extended: <span class="hljs-literal">true</span>&#125;)); <span class="hljs-comment">//使用bodyParser使得url内容可使用(POST方法时必需)</span>app.use(express.static(<span class="hljs-string">&quot;public&quot;</span>)); <span class="hljs-comment">//将public文件夹设置为静态.</span><span class="hljs-comment">//需要手动建立一个项目根目录下的public文件夹,其中包括images和css两个子文件夹,放入所有css和图片</span>app.get(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;  res.sendFile(__dirname + <span class="hljs-string">&quot;/signup.html&quot;</span>);&#125;);app.post(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;  <span class="hljs-keyword">const</span> firstName = req.body.fName;             <span class="hljs-comment">//获取html页面返回的数据(这是body-parser包的作用)</span>  <span class="hljs-keyword">const</span> lastName = req.body.lName;  <span class="hljs-keyword">const</span> email = req.body.email;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;用户已经输入: &quot;</span> +firstName, lastName, email);  <span class="hljs-keyword">const</span> data = &#123;    members:[                              <span class="hljs-comment">//查询所用API的文档可知我们需要存入的内容的格式.</span>      &#123;        email_address: email,             <span class="hljs-comment">//根据格式放入表格中获得的数据</span>        status:<span class="hljs-string">&quot;subscribed&quot;</span>,        merge_fields:&#123;          FNAME:firstName,          LNAME:lastName        &#125;      &#125;    ]  &#125;;  <span class="hljs-keyword">const</span> jsonData = <span class="hljs-built_in">JSON</span>.stringify(data);    <span class="hljs-comment">//将数据JSON化才能传给对方服务器</span>  <span class="hljs-comment">//技术文档可知api地址为 &quot;https://usX.api.mailchimp.com/3.0/lists&quot; , 需要修改usX, 加入list id</span>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;https://us2.api.mailchimp.com/3.0/lists/bf9926d032&quot;</span>;  <span class="hljs-comment">//技术文档可知,还需要一个名为option的参数</span>  <span class="hljs-keyword">const</span> options = &#123;    method:<span class="hljs-string">&quot;POST&quot;</span>,                                            <span class="hljs-comment">//post方法</span>    auth: <span class="hljs-string">&quot;yiding123:!a997795bdfcc2d2be8dd9388511f51b8-us2&quot;</span>    <span class="hljs-comment">//验证信息, 任意取的一个user name + api key</span>  &#125;  <span class="hljs-keyword">const</span> request = https.request(url, options, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;     <span class="hljs-comment">//准备好一个将要发送的request</span>    <span class="hljs-keyword">if</span>(response.statusCode===<span class="hljs-number">200</span>)&#123;      res.sendFile(__dirname + <span class="hljs-string">&quot;/success.html&quot;</span>);      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;成功,跳转至success页面&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;      res.sendFile(__dirname + <span class="hljs-string">&quot;/failure.html&quot;</span>);      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;失败,跳转至failure页面&quot;</span>);    &#125;  &#125;);  request.write(jsonData);      <span class="hljs-comment">//写入, 传给外部服务器</span>  request.end();&#125;);<span class="hljs-comment">//MailChimp API KEY a997795bdfcc2d2be8dd9388511f51b8-us2</span><span class="hljs-comment">//Audience List id bf9926d032   mailchimp能够知道在什么地方加入你的订阅者</span>app.post(<span class="hljs-string">&quot;/failure&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;  res.redirect(<span class="hljs-string">&quot;/&quot;</span>);&#125;);app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server is running on port 3000!   &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getHours() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getMinutes() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getSeconds());&#125;); <span class="hljs-comment">//在网络3000口上收听,如成功则log显示信息</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Initialize a Web App</title>
    <link href="/blog.github.io/2020/10/05/Initialize%20a%20Web%20App/"/>
    <url>/blog.github.io/2020/10/05/Initialize%20a%20Web%20App/</url>
    
    <content type="html"><![CDATA[<hr><p>课程<br>Complete Web Development Bootcamp on Udemy<br><a href="https://www.udemy.com/course/the-complete-web-development-bootcamp/">https://www.udemy.com/course/the-complete-web-development-bootcamp/</a></p><hr><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>一个web包括三个部分:</p><ul><li>HTML  CSS   JS</li><li>以及Back-end</li><li>使用node-js</li></ul><p>常用工具/库:</p><ul><li>Bootstrap: 一个开源CSS框架</li><li>jQuery: 一个JaveScript库</li><li>Heroku: 一个免费服务器网站, 允许免费发布5个项目</li></ul><h3 id="command-line-命令行"><a href="#command-line-命令行" class="headerlink" title="command line 命令行:"></a>command line 命令行:</h3><ul><li><code>cd</code>   改变路径</li><li><code>ls</code>    列出</li><li><code>cd ~</code>    进入用户主目录</li><li><code>cd /</code>   进入根目录</li><li><code>cd ..</code>     返回前一个路径</li><li><code>mkdir</code>     新的路径</li><li><code>touch</code>     新建一个文件 touch hello.txt</li><li><code>start</code>     打开一个文件 start hello.txt  mac是open</li><li><code>start atom hello.txt</code>      用atom打开 mac是 open -a atom</li><li><code>hello.text</code></li><li><code>rm hello.txt</code>    删除一个文件</li><li><code>rm *</code>       删除所有文件</li><li><code>rm -r imgs/</code>     删除一个目录</li></ul><h3 id="新建一个web-app的步骤"><a href="#新建一个web-app的步骤" class="headerlink" title="新建一个web app的步骤:"></a>新建一个web app的步骤:</h3><p>cd进入正确的目录下<br>touch app.js 新建一个主js文件(名称不限)<br>touch black.html red.html 新建几个html文件<br>npm init 初始化npm(npm –verison查看npm版本)<br>初始化信息:描述,入口:为app.js, git信息,作者.<br>完成初始化后,目录下新增package.json文件,记录安装的所有npm的packages<br>安装一些常用的npm包:  </p><ul><li><code>npm install body-parser</code>     跟JSON文本的翻译有关,可在js中获取数据  </li><li><code>npm install express</code>         跟网络建立有关</li><li><code>npm install request</code>         跟数据请求有关  </li></ul><p>(如还未设置git,可能有warn警告)<br>安装完成后,目录下新增一个node_modules文件夹,和package-look.json文件<br>开始编辑app.js:  </p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);           <span class="hljs-comment">//引用npm包express</span><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);    <span class="hljs-comment">//引用npm包body-parser</span><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>);           <span class="hljs-comment">//引用npm包request</span><span class="hljs-keyword">const</span> app = express();                        <span class="hljs-comment">//实例化express</span>app.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Server is running on port 3000!&quot;</span>);&#125;);                                           <span class="hljs-comment">//在网络3000口上收听,如成功则log显示信息</span></code></pre><p>此时在命令行中node app.js启动本地服务器<br>如果成功,console中应该显示”Server is running on port 3000!”<br>在浏览器中输入localhost:3000/访问<br>由于还没有声明GET / 的方法, 浏览器显示Cannot GET /<br>ctrl+c 可以随时结束程序.<br>每一次对代码修改之后, 都需要结束程序,再次启动.<br>为了方便,可以安装Nodemon: 每一次修改代码之后能够自动重启.<br>使用方法:使用nodemon app.js 代替 node app.js 启动程序</p>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Web App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Self Learning</tag>
      
      <tag>Note</tag>
      
      <tag>Web App</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Get Started</title>
    <link href="/blog.github.io/2020/10/03/Hexo%20Get%20Started/"/>
    <url>/blog.github.io/2020/10/03/Hexo%20Get%20Started/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Push-the-entire-hexo-project-to-GitHub"><a href="#Push-the-entire-hexo-project-to-GitHub" class="headerlink" title="Push the entire hexo project to GitHub"></a>Push the entire hexo project to GitHub</h3><p>Hexo only push the rendered files to github as default.</p><p>Posts are saved on local computer.</p><p>So I set a .git on the root dir of the hexo blog project, which connect to another repository.</p><p>More info: <a href="https://github.com/amanlikeair/blog_entire">Link</a></p>]]></content>
    
    
    <categories>
      
      <category>Developer</category>
      
      <category>Blog with Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thesis &#39;&#39;Hyperspectral Image Classification Using Deep Neural Network&#39;&#39;</title>
    <link href="/blog.github.io/2020/09/20/Thesis/"/>
    <url>/blog.github.io/2020/09/20/Thesis/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This is my graduate thesis, whose topic is [Hyperspectral Image Classification Using Deep Neural Network]. I would like to express my sincere gratitude to my supervisor, Professor PHILIP HENG WAI LEONG, for his support and encouragement of my work. Without his help and expert advice, it is impossible to complete this thesis.</p><h1 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h1><blockquote><p>Hyperspectral image is a commonly used technique for earth surface survey in ecology, mining, and hydrological application. Compared with other survey methods, it has the advantage of lower cost and faster data collection. Briefly, it is an image form that contains hundreds of narrow spectral channels in every single pixel, which is a measured value of the corresponding wavelength. By processing the spectral and spatial informa- tion in the hyperspectral image, each pixel and the surface objects they represent will be identified and classified. At present, the most commonly used method for processing hyperspectral images is based on deep learning. However, due to some reasons, such as the defects of neural network design and fewer available training samples, the per- formance of classification needs to be improved. My main contribution in this thesis is that:</p></blockquote><ul><li><ol><li>A preprocessing of the presentation extraction on hyperspectral image data set is implemented, which is utilized to eciently extract the spatial and spectral in- formation of hyperspectral images. Propose an improved extraction technique on edge pixels, which includes more accurate spatial information.</li></ol></li><li><ol start="2"><li>Propose a deep convolu- tional neural network model for hyperspectral image classification. Many techniques, such as dropout and regularization, are applied to optimize the neural network perfor- mance, solving problems like overfitting, and the small mount of training samples.</li></ol></li><li><ol start="3"><li>Experiments are conducted on actual hyperspectral image data set, and compared with other peoples previous work. A high classification accuracy is obtained as the result.</li></ol></li></ul><h1 id="View-in-PDF"><a href="#View-in-PDF" class="headerlink" title="View in PDF"></a>View in PDF</h1><p>For reference only, plagiarism is forbidden.</p><p>View <a href="https://drive.google.com/open?id=1skNxe7hF8NQqjbXcJy34IW0oMplcvf_g">Thesis in pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>Scholar</category>
      
      <category>Thesis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thesis</tag>
      
      <tag>USYD</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
